<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://twblog.hongjianching.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://twblog.hongjianching.com/" rel="alternate" type="text/html" /><updated>2018-10-13T22:37:06+08:00</updated><id>https://twblog.hongjianching.com/</id><title type="html">Jian-Ching 記事本</title><subtitle>An notebook website.</subtitle><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><entry><title type="html">建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 2</title><link href="https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/" rel="alternate" type="text/html" title="建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 2" /><published>2018-10-13T00:00:00+08:00</published><updated>2018-10-13T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/">&lt;p&gt;前一篇發現預設的 Jenkins Agent 沒有 C++ 編譯環境，所以我們要來解決這個問題。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt; 中提到使用的 agent docker image 是 jenkins/jnlp-slave，所以我們先參考一下原本的 Dockerfile 是怎麼寫的 &lt;a href=&quot;https://github.com/jenkinsci/docker-jnlp-slave/blob/3.26-1/Dockerfile&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/slave:3.26-1
MAINTAINER Oleg Nenashev &amp;lt;o.v.nenashev@gmail.com&amp;gt;
LABEL Description=&quot;This is a base image, which allows connecting Jenkins agents via JNLP protocols&quot; Vendor=&quot;Jenkins project&quot; Version=&quot;3.23&quot;

COPY jenkins-slave /usr/local/bin/jenkins-slave

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;從中可以知道，就是復製了 slave 檔案以及設定啟動 slave，因為複製做一次就好，所以我們只需要啟動 slave。&lt;/p&gt;

&lt;p&gt;利用 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/&quot;&gt;使用 GitHub 在 DockerHub 自動建置 Docker Image&lt;/a&gt; 的方法，建立一個 &lt;a href=&quot;https://github.com/allyusd/docker-jenkins-jnlp-slave-cpp&quot;&gt;docker-jenkins-jnlp-slave-cpp&lt;/a&gt; github 專案並且建立一個 Dockerfile 檔案，內容就是以 jenkins/jnlp-slave 為基底，加上安裝 C++ 編譯環境，最後記得啟動 slave&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/jnlp-slave:3.26-1

RUN apt update &amp;amp;&amp;amp; apt install build-essential -y

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著在 dockerhub 建立 &lt;a href=&quot;https://hub.docker.com/r/allyusd/jenkins-jnlp-slave-cpp/&quot;&gt;jenkins-jnlp-slave-cpp&lt;/a&gt; 自動建置專案，並且手動觸發一次，結果失敗了，查詢一下 &lt;a href=&quot;https://hub.docker.com/r/allyusd/jenkins-jnlp-slave-cpp/builds/baavigxpyfscewc3e63nbvh/&quot;&gt;Log&lt;/a&gt; 居然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;List directory /var/lib/apt/lists/partial is missing. - Acquire (13: Permission denied)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;權限不足？這沒道理啊，docker 預設是 root，怎麼會有權限問題呢？等等，剛剛是不是提到了&lt;code class=&quot;highlighter-rouge&quot;&gt;預設&lt;/code&gt;兩個字。嗯，既然如此，那有可能是被改掉，但是剛剛參考的 Dockerfile 很乾淨，難道是再上一層繼承的 image？&lt;/p&gt;

&lt;p&gt;從 Dockerfile 可以看到 jenkins/jnlp-slave 是繼承 jenkins/slave來的，那來看一下 Dockerfile &lt;a href=&quot;https://github.com/jenkinsci/docker-slave/blob/3.26-1/Dockerfile&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8-jdk
MAINTAINER Oleg Nenashev &amp;lt;o.v.nenashev@gmail.com&amp;gt;

ARG user=jenkins
ARG group=jenkins
ARG uid=10000
ARG gid=10000

ENV HOME /home/${user}
RUN groupadd -g ${gid} ${group}
RUN useradd -c &quot;Jenkins user&quot; -d $HOME -u ${uid} -g ${gid} -m ${user}
LABEL Description=&quot;This is a base image, which provides the Jenkins agent executable (slave.jar)&quot; Vendor=&quot;Jenkins project&quot; Version=&quot;3.23&quot;

ARG VERSION=3.26
ARG AGENT_WORKDIR=/home/${user}/agent

RUN curl --create-dirs -sSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \
  &amp;amp;&amp;amp; chmod 755 /usr/share/jenkins \
  &amp;amp;&amp;amp; chmod 644 /usr/share/jenkins/slave.jar

USER ${user}
ENV AGENT_WORKDIR=${AGENT_WORKDIR}
RUN mkdir /home/${user}/.jenkins &amp;amp;&amp;amp; mkdir -p ${AGENT_WORKDIR}

VOLUME /home/${user}/.jenkins
VOLUME ${AGENT_WORKDIR}
WORKDIR /home/${user}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;抓到了！其中有一行是 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER ${user}&lt;/code&gt;，這個指令改變了目前的使用者為 jenkins，造成權限不足以安裝套件。既然如此，那我們就把使用者改回來試試看。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/jnlp-slave:3.26-1

USER root
RUN apt update &amp;amp;&amp;amp; apt install build-essential -y
USER jenkins

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這 Github 更新 Dockerfile 之後，Dockerhub 自動開始了建置映像檔的動作，我們可以上個廁所、泡泡茶再回來看看建置結果。&lt;/p&gt;

&lt;p&gt;很好，這次成功了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_21-07-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來就是啟動一個新的 agent，如果忘記的話可以參考 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這次不同的是，標籤設定為 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt;，使用方式設為&lt;code class=&quot;highlighter-rouge&quot;&gt;只保留給限定節點的作業&lt;/code&gt;，因為有些專案不需要 C++ 環境，所以我們為了區隔，讓這個 agent 只跑需要 C++ 的專案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_21-10-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著啟動 C++ Agent&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --name jenkins_agent_cpp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d --restart always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    allyusd/jenkins-jnlp-slave-cpp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -url http://192.168.43.140:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    951ac478b69131e43fb2cfb6d201ecf789ba388a759ea946d7ab62aac55227a7 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    agent-cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著修改上一篇建立的 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_cpp&lt;/code&gt; 專案設定，選取&lt;code class=&quot;highlighter-rouge&quot;&gt;限制專案執行節點&lt;/code&gt;，在&lt;code class=&quot;highlighter-rouge&quot;&gt;標籤表示式&lt;/code&gt;輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt;，按下儲存之後點擊&lt;code class=&quot;highlighter-rouge&quot;&gt;馬上建置&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_22-28-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這一次順利的建置成功啦！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_22-31-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Cpp" /><category term="Docker" /><category term="Jenkins" /><summary type="html">前一篇發現預設的 Jenkins Agent 沒有 C++ 編譯環境，所以我們要來解決這個問題。</summary></entry><entry><title type="html">建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 1</title><link href="https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1/" rel="alternate" type="text/html" title="建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 1" /><published>2018-10-12T00:00:00+08:00</published><updated>2018-10-12T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1/">&lt;p&gt;介紹如何建立一個有 C++ 編譯環境及 Jenkins Agent 的 Docker Image。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt; 我們已經建立了一個有 Agent 的 Jenkins CI 系統，先建立一個小小的專案，單純確認 Jenkins Agent 是否正常運作。&lt;/p&gt;

&lt;p&gt;選擇左方選單的&lt;code class=&quot;highlighter-rouge&quot;&gt;新增作業&lt;/code&gt;，然後名稱輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 並且選擇建置 &lt;code class=&quot;highlighter-rouge&quot;&gt;Free-Style 軟體專案&lt;/code&gt; 之後按下 OK&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_22-57-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-11-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之後會自動進入 test 專案的設定，拉到最下方的&lt;code class=&quot;highlighter-rouge&quot;&gt;建置&lt;/code&gt;，選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;新增建置步驟&lt;/code&gt;後按下&lt;code class=&quot;highlighter-rouge&quot;&gt;執行 Shell&lt;/code&gt;，在指令欄位輸入&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下儲存後，自動切換到專案主頁，點擊左方&lt;code class=&quot;highlighter-rouge&quot;&gt;馬上建置&lt;/code&gt;一下，然後點擊左下角&lt;code class=&quot;highlighter-rouge&quot;&gt;建置歷程&lt;/code&gt;出現的&lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt;，再選擇左方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Console Output&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-19-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-20-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在右邊就會出現在 Agent 上執行的結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-21-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到這個結果，代表我們的 Jenkins 系統正確的運作喔。&lt;/p&gt;

&lt;p&gt;接著 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/11/install-cpp-compiler-on-ubuntu/&quot;&gt;在 Ubuntu 安裝 C++ 編譯環境&lt;/a&gt; 這篇也已經知道如何編譯 C++ 程式，讓我們試著在 Jenkins 上完成這個件事吧。&lt;/p&gt;

&lt;p&gt;照著上面的流程，再新增一個專案，命名為 test_cpp，這次在&lt;code class=&quot;highlighter-rouge&quot;&gt;原始碼管理&lt;/code&gt;選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;Git&lt;/code&gt; 並且輸入 git 網址 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/helloworld.cpp.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-25-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後在&lt;code class=&quot;highlighter-rouge&quot;&gt;執行 Shell&lt;/code&gt;輸入編譯跟執行的動作，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ helloworld.cpp -o helloworld
./helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下儲存後，點選馬上建置，但是，我們得到一個紅燈，代表建置失敗&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-29-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們看一下錯誤訊息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-31-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;錯誤訊息 &lt;code class=&quot;highlighter-rouge&quot;&gt;g++: not found&lt;/code&gt; 代表我們的 Agent 沒有 C++ 編譯環境，在下一篇我們來解決這個問題&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Cpp" /><category term="Docker" /><category term="Jenkins" /><summary type="html">介紹如何建立一個有 C++ 編譯環境及 Jenkins Agent 的 Docker Image。</summary></entry><entry><title type="html">在 Ubuntu 安裝 C++ 編譯環境</title><link href="https://twblog.hongjianching.com/2018/10/11/install-cpp-compiler-on-ubuntu/" rel="alternate" type="text/html" title="在 Ubuntu 安裝 C++ 編譯環境" /><published>2018-10-11T00:00:00+08:00</published><updated>2018-10-11T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/11/install-cpp-compiler-on-ubuntu</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/11/install-cpp-compiler-on-ubuntu/">&lt;p&gt;Ubuntu 預設沒有 C++ 編譯環境，但是可以自己安裝&lt;/p&gt;

&lt;p&gt;不想影響現有的 host，所以叫 docker 建一個 ubuntu 出來&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;安裝 C++ 編譯環境套件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update
apt install build-essential -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以選擇手動建立一個檔案存為 helloworld.cpp&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或是直接透過 git clone 一份&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/allyusd/helloworld.cpp.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;helloworld.cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果要使用 git 的話，因為 docker 版本的 ubuntu 預設沒有安裝，記得先安裝 git 套件。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install git -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;程式碼內容很單純，就是顯示 &lt;strong&gt;Hello World&lt;/strong&gt; 文字而己，只是驗證我們的 C++ 環境已經準備好了&lt;/p&gt;

&lt;p&gt;接著透過 C++ 的編譯器 g++ 來編譯&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ helloworld.cpp -o helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;建置後會產生一個 &lt;strong&gt;helloworld&lt;/strong&gt; 的檔案，就可以執行了&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到 Hello Wolrd 就代表我們完成環境建置啦！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-11-install-cpp-compiler-on-ubuntu/2018-10-11_22-31-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Cpp" /><category term="Ubuntu" /><summary type="html">Ubuntu 預設沒有 C++ 編譯環境，但是可以自己安裝</summary></entry><entry><title type="html">使用 Docker 安裝 Jenkins Agent</title><link href="https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/" rel="alternate" type="text/html" title="使用 Docker 安裝 Jenkins Agent" /><published>2018-10-10T00:00:00+08:00</published><updated>2018-10-10T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/">&lt;p&gt;讓 Jenkins Master 專心在 CI Server 的任務，剩下的工作交給 Jenkins Agent 處理，這樣可以降低環境的複雜度，也可以增加維護的方便性。&lt;/p&gt;

&lt;p&gt;如果還沒有安裝 Jenkins Master 的話可以先參考 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker-on-ubuntu/&quot;&gt;使用 Docker 安裝 Jenkins&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkins-master-設定&quot;&gt;Jenkins Master 設定&lt;/h1&gt;

&lt;p&gt;首先在 Jenkins 網頁選擇 &lt;em&gt;管理 Jenkins&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-41-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著往下找到 &lt;em&gt;管理節點&lt;/em&gt;，然後點擊 &lt;em&gt;Master&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-44-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-45-56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這個節點就是 Jenkins Master，也是目前操作網站所在的位置，選擇左方的 &lt;em&gt;設定&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-47-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;為了避免有任何的工作在 Master 上面執行，把 &lt;em&gt;執行程式數&lt;/em&gt; 設為 &lt;strong&gt;0&lt;/strong&gt; 然後儲存&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-49-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們可以在左下方看到原本的兩個執行程式狀態消失了，接著點左上方的 &lt;em&gt;節點&lt;/em&gt; 回到管理節點頁面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-51-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這次選擇 &lt;em&gt;新增節點&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-53-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;輸入節點名稱為 &lt;em&gt;agent&lt;/em&gt; 並且按下 &lt;em&gt;Permanent Agent&lt;/em&gt; 之後按下 OK&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-54-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在新節點的設定頁面，保持預設值不變，直接按下儲存，然後回到管理節點頁面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-56-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理節點頁面按下剛剛新增的 &lt;em&gt;agnet&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-57-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 agent 節點會有一行教你怎麼執行 Jenkins agnet 的指令，這邊我們只要拿 secret 後面的參數就好，這個例子是 &lt;strong&gt;1cdcff34b6ddadf38ca3ca42869ae0ad68e62d0274fbad43798b749e3f840884&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_21-58-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkins-agent-安裝&quot;&gt;Jenkins Agent 安裝&lt;/h1&gt;

&lt;p&gt;使用 Docker 啟動 Jenkins Agent，需要三個參數，分別是 Jenkins 的網址、剛剛拿到的 secret token 還有 agent 名稱&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --name jenkins_agent &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d --restart always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    jenkins/jnlp-slave &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -url http://192.168.5.20:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    1cdcff34b6ddadf38ca3ca42869ae0ad68e62d0274fbad43798b749e3f840884 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    agent
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;是的，這樣 Jenkins Agent 就完成啟動，回到剛剛的 Agent 頁面按下 F5 重新更新，會發現 Agent 已經上線並且準備工作了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-10-install-jenkins-agent-with-docker/2018-10-10_22-12-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ref&quot;&gt;ref&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/jenkins/jnlp-slave/&quot;&gt;jenkins/jnlp-slave - Docker Hub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.cloudbees.com/hc/en-us/articles/115001771692-How-to-Create-Permanent-Agents-with-Docker&quot;&gt;How to Create Permanent Agents with Docker – CloudBees Support&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Jenkins" /><summary type="html">讓 Jenkins Master 專心在 CI Server 的任務，剩下的工作交給 Jenkins Agent 處理，這樣可以降低環境的複雜度，也可以增加維護的方便性。</summary></entry><entry><title type="html">使用 Docker 安裝 Jenkins</title><link href="https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker/" rel="alternate" type="text/html" title="使用 Docker 安裝 Jenkins" /><published>2018-10-09T00:00:00+08:00</published><updated>2018-10-09T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker/">&lt;p&gt;Jenkins 是 CI 老牌工具，透過新的 Docker 技術，快速建立自己的 CI 環境。&lt;/p&gt;

&lt;p&gt;如果還沒有 Docker 執行環境，可以參考 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/02/install-docker/&quot;&gt;安裝 Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一步先在 host 建立存放 Jenkins 的目錄，放在 /data/jenkins&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir -p /data/jenkins
sudo chown -R &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$GROUP&lt;/span&gt; /data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;透過 docker 啟動 jenkins&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
    --name jenkins \
    -d --restart always \
    -p 8080:8080 -p 50000:50000 \
    -v /data/jenkins:/var/jenkins_home \
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後可以在 http://localhost:8080 看到 jenkins 準備上工了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker/2018-10-09_21-19-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等一段時候之後，jenkins 就會要求輸入預設管理員密碼，畫面上提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;，但是我們有將容器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/jenkins_home&lt;/code&gt; 對映到 host 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/jenkins&lt;/code&gt;，所以我們可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/jenkins/secrets/initialAdminPassword&lt;/code&gt; 找到預設密碼&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /data/jenkins/secrets/initialAdminPassword
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下確認後，選擇 install suggested plugins，plugins 可以之後再依需要安裝&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker/2018-10-09_21-31-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待 plugin 安裝完成後，建立第一個管理員帳號，接著輸入 Jenkins URL，如果只是測試用可以保持 losthost 沒關係，但是如果要正式使用，記得改為真實 IP 喔。最後可以看到 &lt;strong&gt;Jenkins is ready&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker/2018-10-09_21-51-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按下 &lt;em&gt;Start using Jenkins&lt;/em&gt; 之後就會看到 Jenkins 主頁面了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker/2018-10-09_21-53-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 建置完成嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Jenkins" /><summary type="html">Jenkins 是 CI 老牌工具，透過新的 Docker 技術，快速建立自己的 CI 環境。</summary></entry><entry><title type="html">使用 GitHub 在 DockerHub 自動建置 Docker Image</title><link href="https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/" rel="alternate" type="text/html" title="使用 GitHub 在 DockerHub 自動建置 Docker Image" /><published>2018-10-08T00:00:00+08:00</published><updated>2018-10-08T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/">&lt;p&gt;今天要談論如何使用 GitHub 和 DockerHub 建立自動建置 Image，功能強大，但是反而非常的簡單喔！&lt;/p&gt;

&lt;p&gt;前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/&quot;&gt;將 Image 發佈到 Docker Hub&lt;/a&gt; 已經學會手動將做好的 Image 放到 DockerHub 上，但是製作的動作很多，而且如果是想給別人用會有疑慮，因為不知道你的映像檔做了哪些修改，或者會不會加什麼料進去呢？&lt;/p&gt;

&lt;p&gt;為了 &lt;del&gt;世界和平&lt;/del&gt; 讓其它人可以安心下載你製作的 image，也為了節省自己的時間，我們就利用 GitHub 和 DockerHub 來自動建置映像檔吧。&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;
&lt;p&gt;首先要有 GitHub 帳號，接著建立一個 git 倉庫，這邊命名為 docker-ithelp-webserver-auto，命名沒有規範，叫什麼都可以，個人為了跟一般程式碼專案區隔，所以會加上 docker 前缀字，或者可以考慮單獨申請一個獨立帳號來集中 docker 專案。&lt;/p&gt;

&lt;p&gt;重要的一點，為了直接在 GitHub 網頁操作，請將 &lt;em&gt;Initialize this repository with a README&lt;/em&gt; 打勾喔！(想直接用 git 操作的人就可以無視沒關係)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-30-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後就有一個 Git 倉庫了，接著按下右上角的 &lt;em&gt;Create new file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-32-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;輸入檔名 Dockerfile，和前一篇 Dockerfile 的內容，接著按下 &lt;em&gt;Commit new file&lt;/em&gt; 就完成 Git 倉庫的準備了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-34-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dockerhub&quot;&gt;DockerHub&lt;/h1&gt;
&lt;p&gt;接著到 DockerHub，選擇右上角的 &lt;em&gt;Create&lt;/em&gt; 及 &lt;em&gt;Create Automated Build&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-37-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次因為還沒有連結 GitHub，所以會需要授權，按下 &lt;em&gt;Link Accounts&lt;/em&gt; 及 &lt;em&gt;Link Github&lt;/em&gt; 及 &lt;em&gt;Select&lt;/em&gt;，完成授權後，重覆 &lt;em&gt;Create Automated Build&lt;/em&gt; 的動作會看到 &lt;em&gt;Create Auto-build Github&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-41-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後就會出現你 Github 所有的專案，選擇剛剛建立的 docker-ithelp-webserver-auto，接著給 Dockerhub 的倉庫命名，個人習慣會把 docker 前缀字拿掉，這個例子為 ithelp-webserver-auto，輸入 Description 後按下 &lt;em&gt;Cretae&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-43-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這麼一來 DockerHub 倉庫也建立完成了，從首頁可以看完最大的不同是會顯示這個 image 的來源，還有選單多了 &lt;em&gt;Dockerfile&lt;/em&gt;、&lt;em&gt;Build Details&lt;/em&gt; 和 &lt;em&gt;Build Settings&lt;/em&gt;，這邊有兩個網頁可以比較一下 &lt;a href=&quot;https://hub.docker.com/r/allyusd/ithelp-webserver/&quot;&gt;allyusd/ithelp-webserver&lt;/a&gt; 和 &lt;a href=&quot;https://hub.docker.com/r/allyusd/ithelp-webserver-auto/&quot;&gt;allyusd/ithelp-webserver-auto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-46-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-48-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;選擇 &lt;em&gt;Build Settings&lt;/em&gt; 按下 &lt;em&gt;Trigger&lt;/em&gt; 之後 Dockerhub 就會依照 Github 上面的 Dockerfile 開始建置嘍！建置的狀態或 Logs 可以在 &lt;em&gt;Build Details&lt;/em&gt; 查詢。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-08-create-dockerhub-automated-build/2018-10-08_21-55-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且之後只要 Github 有 push 的動作，就會自動觸發建置喔，這麼一來我們只要專心寫好 Dockerfile，就可以等著使用自動建置好的 image 嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Dockerhub" /><category term="Github" /><category term="Dockerfile" /><summary type="html">今天要談論如何使用 GitHub 和 DockerHub 建立自動建置 Image，功能強大，但是反而非常的簡單喔！</summary></entry><entry><title type="html">將 Image 發佈到 Docker Hub</title><link href="https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/" rel="alternate" type="text/html" title="將 Image 發佈到 Docker Hub" /><published>2018-10-07T00:00:00+08:00</published><updated>2018-10-07T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/">&lt;p&gt;這篇會說明如何將 Image 發佈到 Docker Hub。&lt;/p&gt;

&lt;p&gt;在前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/&quot;&gt;使用 Dockerfile 建立自己的 Docker Image&lt;/a&gt; 已經知道如何建立自己的 image，但是建立的 image 只能本機使用，除非手動復製，否則不能在其它電腦使用。&lt;/p&gt;

&lt;p&gt;在這之前有個疑問，那之前我們使用的 image，像是 hello-world、ubuntu:18.04 是從哪裡來的呢？&lt;/p&gt;

&lt;h1 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h1&gt;
&lt;p&gt;來源其實就是 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;，目前是 Docker 預設的 image 來源，像是 &lt;a href=&quot;https://hub.docker.com/_/hello-world/&quot;&gt;hello-world&lt;/a&gt;、&lt;a href=&quot;https://hub.docker.com/_/ubuntu/&quot;&gt;ubuntu&lt;/a&gt;。從網站上可以找看看自己有興趣的 image，或者上傳自己的 image。&lt;/p&gt;

&lt;p&gt;我們建立好 Docker Hub 帳號之後，就可以建立 image repository，按右上角的 Create，然後選擇 Create Repository&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-28-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著在 name 的欄位輸入想要的 image 名稱，這個範例中命名為 ithelp-webserver，在下面的 description 可以輸入想要說明的資訊。Visibility 決定這個 image 是不是公開的，公開的話每個人都可以使用，私有的話只有自己能用，但是免費帳號只能有個一個私有倉庫，想要多一些的話就要付費。選擇後按下 Create。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-32-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成後就會看到這個畫面，這樣一個映像檔倉庫就建立完成了，左上方就是這個 image 的名稱，因為 docker hub 是全球的人共用的，所以個人建立的 image 都會放在該帳號下，這個例子中就是 allyusd/ithelp-webserver。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-37-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後回到 console，利用 build 指令重新命名 allyusd/ithelp-webserver 映像檔，因為跟前一個完全一樣，所以動作很快完成。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build . -t allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在將做好的 image 發佈到 docker hub 之前，需要先證明自己是這個倉庫的擁有者，需要透過 login 指令登入，接著輸入帳號、密碼&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成登入後，就可以使用 push 指令發佈 image 到 docker hub&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-11-55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成後可以回到 dockerhub 專案的位置，選擇 Tags 就可以看到剛剛上傳的資訊&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-13-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後我們可以先用 rmi 指令刪除本地的 image，然後再用新的指令啟動 webserver&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -it &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -p 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -v ~/www:/var/www/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-18-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這麼一來，我們就可以在任何電腦啟動我們自己做的映像檔&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Dockerhub" /><summary type="html">這篇會說明如何將 Image 發佈到 Docker Hub。</summary></entry><entry><title type="html">使用 Dockerfile 建立自己的 Docker Image</title><link href="https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/" rel="alternate" type="text/html" title="使用 Dockerfile 建立自己的 Docker Image" /><published>2018-10-06T00:00:00+08:00</published><updated>2018-10-06T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/">&lt;p&gt;這篇寫簡單 Dockerfile 來建立自己的 Docker Image&lt;/p&gt;

&lt;p&gt;在前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/&quot;&gt;使用 Docker - Port 及 Volume&lt;/a&gt;中，如果有照著每個動作來做的話，一定會發現一件事。&lt;/p&gt;

&lt;p&gt;那就是，安裝 nginx 的動作重覆很多次而且很久(因為每次都要重新下載)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install nginx -y
service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就是上面兩行指令，一再的重覆&lt;/p&gt;

&lt;h1 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/02/install-docker/&quot;&gt;安裝 Docker&lt;/a&gt; 時有提過，使用 Docker 其中一個優勢就是繼承，這個特性在 Dockerfile 可以體現出來。&lt;/p&gt;

&lt;p&gt;Dockerfile 最基本的指令是 FROM，也就是這個 Dockerfile 是繼承哪個 image 的。有一行就可以視為合格的 Dockerfile，像是我們用 ubuntu 當基底。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;當然，這樣產生的 image 會跟 ubuntu:18.04 一模一樣，所以我們要加上我們想要的，安裝 nginx 動作。透過 RUN 指令，可以幫我們做到這件事&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt update &amp;amp;&amp;amp; apt install nginx -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後，別忘了啟動 nginx，畢竟能自動完成的事情，又何必自己來呢？透過 CMD 指令，告訴 Docker 啟動容器後應該做什麼事情。&lt;/p&gt;

&lt;p&gt;這邊特別說明一下，如果 CMD 後面指定的是不會結束的程式，那就沒有問題，但是之前是透過 service 命令啟動的，因為這個命令一執行就結束了，接著容器就結束了，為了避免這種情況，後面加上了 /bin/bash 維持運作。(當然也可以直接執行 nginx 就不用這個動作)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt update &amp;amp;&amp;amp; apt install nginx -y

CMD service nginx start &amp;amp;&amp;amp; /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;build---建置映像檔&quot;&gt;build - 建置映像檔&lt;/h1&gt;

&lt;p&gt;寫完 Dockerfile，就可以建置 image 了，透過 build 指令，後面接 Dockerfile 所在的路徑，最好加上 -t 參數給個名字&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build . -t webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等他建置完，我們可以透過 images 指令來查詢本機目前有哪些 image&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-06-using-dockerfile-build-docker-image/2018-10-06_22-09-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從圖片中可以看到，除了我們之前用到的 hello-wrold 和 ubuntu:18.04 之外，還多了一個 webserver 的 image，這就是剛剛建立好的映像檔。這麼一來我們把之前的指令改用 webserver 來啟動吧。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -it &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -p 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -v ~/www:/var/www/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這次不再需要進入容器，也不用啟動 nginx，直接可以在 http://localhost 出現網頁嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Dockerfile" /><summary type="html">這篇寫簡單 Dockerfile 來建立自己的 Docker Image</summary></entry><entry><title type="html">使用 Docker - Port 及 Volume</title><link href="https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/" rel="alternate" type="text/html" title="使用 Docker - Port 及 Volume" /><published>2018-10-05T00:00:00+08:00</published><updated>2018-10-05T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/">&lt;p&gt;這篇講一下設定 Port 及 Volume，也是網路及硬碟最簡單的用法&lt;/p&gt;

&lt;p&gt;上一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/04/run-docker-service/&quot;&gt;使用 Docker - 背景服務&lt;/a&gt; 已經提到如何啟動背景服務執行的方法，這次直接進到容器內，安裝並啟動 nginx。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install nginx -y
service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在 chrome 上面輸入 localhost，就會出現
&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-33-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是因為容器是個獨立的環境，預設是沒有任何 Port 對外開放的。&lt;/p&gt;

&lt;h1 id=&quot;-p-port-對映&quot;&gt;-p Port 對映&lt;/h1&gt;

&lt;p&gt;使用 -p 參數，左邊是 host 的 port 號，右邊是 container 的 port 號。在這個例子中都是 80 port，完整的指令如下(這串指串越來越長了呢…)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it -p 80:80 ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;執行後可以用 ps 看一下，會發現在 PORTS 欄位多了剛剛加上的設定喔
&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-27-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著再次安裝並啟動 nginx，並且在 chrome 按下 F5 更新，這次成功出現網頁了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-32-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;-v-volume-對映&quot;&gt;-v Volume 對映&lt;/h1&gt;
&lt;p&gt;接著，我們想要修改網頁，但是容器內沒有編輯器而且不想安裝，能不能直接在 Host 上面修改，然後直接反應在容器呢？&lt;/p&gt;

&lt;p&gt;接著利用 Volume 對映，就好像前面講到可以指定 Port 一樣，只是這次換成了硬碟路徑對映，使用 -v 參數，左邊是 Host 路徑，右邊是 container 路徑。在這個例子中，設定在家目錄的 www，對應到 container 內 nginx 的預設路徑 /usr/share/nginx/html，完整的指令如下&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it -p 80:80 -v ~/www:/var/www/html ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;已經變得超級長了，這時候在 script 或 Dockerfile 中為了方便閱讀，可能會寫成這樣，意思是一樣的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
    --restart=always \
    -d \
    -it \
    -p 80:80 \
    -v ~/www:/var/www/html \
    ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安裝並啟動 nginx，退出容器並且修改 host 的 html 檔案，在 chrome 按下 F5 更新後可以看到網頁已經是修改後的樣子了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_23-35-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">這篇講一下設定 Port 及 Volume，也是網路及硬碟最簡單的用法</summary></entry><entry><title type="html">使用 Docker - 背景服務</title><link href="https://twblog.hongjianching.com/2018/10/04/run-docker-service/" rel="alternate" type="text/html" title="使用 Docker - 背景服務" /><published>2018-10-04T00:00:00+08:00</published><updated>2018-10-04T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/04/run-docker-service</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/04/run-docker-service/">&lt;p&gt;接著&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/03/run-docker-basic/&quot;&gt;使用 Docker - 基本操作&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;run---執行容器&quot;&gt;run - 執行容器&lt;/h1&gt;

&lt;p&gt;之前提到使用 run 及 -it 參數可以進入容器內操作，這時候如果輸入 exit 離開就會結束容器執行。但如果不想結束容器運作，單純想退出 shell 怎麼辦？&lt;/p&gt;

&lt;p&gt;直接關閉 shell 或是按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + p&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + q&lt;/code&gt; 就可以保持容器運作&lt;/p&gt;

&lt;p&gt;那能不能一開始就想讓容器保持運作，像一個背景服務一樣單獨執行而不進入 shell 介面呢？&lt;/p&gt;

&lt;p&gt;可以，使用 -d，代表 detach&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-43-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;attach&quot;&gt;attach&lt;/h1&gt;
&lt;p&gt;好的，雖然我剛剛是這麼要求的，但是我反悔想進入容器內操作，能不能不要啟動新的容器直接進入目前執行中的容器呢？&lt;/p&gt;

&lt;p&gt;可以，剛剛是 detach，反過來是 attach，一樣可以透過 id 或 name 指定要進入的容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker attach running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-47-55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;記得要離開的時候要透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + p&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + q&lt;/code&gt; 進行 detach，否則容器會終止運行喔。&lt;/p&gt;

&lt;h1 id=&quot;stop-start---停止啟動容器&quot;&gt;stop, start - 停止、啟動容器&lt;/h1&gt;
&lt;p&gt;既然我們的目標是一個背景服務，萬一不小心直接輸入 exit 關掉的話就不好了，所以我們可以把之前為了方便測試的 –rm 參數拿掉，這樣容器在終止時還會保留下來。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這裡同時介紹一下，運行中的容器想要停止的話可以透過 stop 指令，並且透過 start 重新啟動&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-58-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;restart---重新啟動&quot;&gt;–restart - 重新啟動&lt;/h1&gt;
&lt;p&gt;要作為背景服務，別忘了自動重新啟動的功能，透過 –restart 加上 always 讓 docker 自動幫容器重新啟動&lt;/p&gt;

&lt;p&gt;重新啟動包含下列情境&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Host 開機時自動啟動容器 (是的，預設開機時是不會啟動的喔)&lt;/li&gt;
  &lt;li&gt;在容器中不小心輸入 exit 退出運行時自動重啟&lt;/li&gt;
  &lt;li&gt;容器運行中的程式當掉了，自動重啟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊要注意，自動重啟 &lt;strong&gt;不包含&lt;/strong&gt; 上面提到的 stop 指令喔，透過 stop 指令還是會停止面前容器運作，不會自動重啟的，不過也因為這樣才能進行維謢作業&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_22-09-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">接著使用 Docker - 基本操作</summary></entry></feed>