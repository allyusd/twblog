<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://twblog.hongjianching.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://twblog.hongjianching.com/" rel="alternate" type="text/html" /><updated>2020-02-15T12:17:08+08:00</updated><id>https://twblog.hongjianching.com/</id><title type="html">Jian-Ching 記事本</title><subtitle>An notebook website.</subtitle><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><entry><title type="html">在 Vue 專案使用 Slot 進行 Layout</title><link href="https://twblog.hongjianching.com/2020/02/15/use-slot-in-vue-layout/" rel="alternate" type="text/html" title="在 Vue 專案使用 Slot 進行 Layout" /><published>2020-02-15T00:00:00+08:00</published><updated>2020-02-15T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/02/15/use-slot-in-vue-layout</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/02/15/use-slot-in-vue-layout/">&lt;h2 id=&quot;常見的-layout-排版範例&quot;&gt;常見的 Layout 排版範例&lt;/h2&gt;

&lt;p&gt;這是常見的左中右的排版&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-15-use-slot-in-vue-layout/2020-02-15_11-43-27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中的 template 如下&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;outside-box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;            
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;center&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中同時包含了排版 (Layout) 及內容 (Content)，如果要減少重覆的工作，我們可以將其中內容的部份抽離，留下單純的排版。&lt;/p&gt;

&lt;h2 id=&quot;使用-slot&quot;&gt;使用 Slot&lt;/h2&gt;

&lt;p&gt;透過 Vue 的 Slot 機制，將會變動的內容改用 slot 取代，建立 Layout.vue
因為我們需要用到多個 slot，需要分別加上 name 用來代表不用的位置&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Layout.vue
```html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;template&gt;
    &lt;div class=&quot;box&quot;&gt;
        &lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;
        &lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;
        &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;
    &lt;/div&gt;
&lt;/template&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
接著將原本的 template 套上 Layout.vue
```html
&amp;lt;template&amp;gt;
  &amp;lt;div class=&quot;outside-box&quot;&amp;gt;
    &amp;lt;Layout&amp;gt;
      &amp;lt;template v-slot:left&amp;gt;
        &amp;lt;div class=&quot;item left&quot;&amp;gt;left&amp;lt;/div&amp;gt;            
      &amp;lt;/template&amp;gt;
      &amp;lt;template v-slot:center&amp;gt;
        &amp;lt;div class=&quot;item center&quot;&amp;gt;center&amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
      &amp;lt;template v-slot:right&amp;gt;
        &amp;lt;div class=&quot;item right&quot;&amp;gt;right&amp;lt;/div&amp;gt;
      &amp;lt;/template&amp;gt;
    &amp;lt;/Layout&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;執行結果會跟原本的一樣喔！但是擁有一個 Layout.vue 可以重覆使用排版。&lt;/p&gt;

&lt;p&gt;關於更多 Slot 資料可以參考官方文件 &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Named-Slots-with-the-slot-Attribute&quot;&gt;Slots — Vue.js&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Vue.js" /><category term="Slot" /><summary type="html">常見的 Layout 排版範例</summary></entry><entry><title type="html">使用 Vue CLI 建立 Vue.js 專案</title><link href="https://twblog.hongjianching.com/2020/02/08/use-vue-cli-create-vuejs-project/" rel="alternate" type="text/html" title="使用 Vue CLI 建立 Vue.js 專案" /><published>2020-02-08T00:00:00+08:00</published><updated>2020-02-08T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/02/08/use-vue-cli-create-vuejs-project</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/02/08/use-vue-cli-create-vuejs-project/">&lt;h2 id=&quot;安裝-vue-cli&quot;&gt;安裝 Vue CLI&lt;/h2&gt;
&lt;p&gt;假設已經安裝好 yarn 跟 Node.js，使用 yarn 安裝 Vue CLI&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn global add @vue/cli @vue/cli-service-global
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安裝後可以透過 version 參數查詢 Vue CLI 安裝版本&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue --version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-04_22-09-51.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;查詢-vue-cli&quot;&gt;查詢 Vue CLI&lt;/h2&gt;
&lt;p&gt;想知道 Vue CLI 可以使用哪些指令，可以透過 help 參數，或是 h 短參數，什麼都沒輸入也可以，
三種執行結果相同&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue --help
vue -h
vue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-04_22-15-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;建立專案&quot;&gt;建立專案&lt;/h2&gt;
&lt;p&gt;使用 create 指令建立專案，可以故意不帶參數查詢指令細節，或是乖乖的輸入 help 參數&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue create --help
vue create -h
vue create
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-04_22-19-03.png&quot; alt=&quot;&quot; /&gt;
上圖除了顯示指令細節之外，最後提示缺少必要的參數 app-name&lt;/p&gt;

&lt;p&gt;建立第一個叫 00_default_app 的專案&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue create 00_default_app
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;預設選擇 default (babel, eslint)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-08_21-06-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下一步選擇使用的套件管理工具，依個人喜好而定，這邊選擇 yarn&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-08_21-07-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待專案產生完畢，依照提示啟動&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;00_default_app
yarn serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接者開啟 http://localhost:8080/ 就可以看到網頁了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-02-08-use-vue-cli-create-vuejs-project/2020-02-08_21-16-49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Vue.js" /><category term="Vue-CLI" /><summary type="html">安裝 Vue CLI 假設已經安裝好 yarn 跟 Node.js，使用 yarn 安裝 Vue CLI</summary></entry><entry><title type="html">重新開張迎接新的挑戰</title><link href="https://twblog.hongjianching.com/2020/01/30/reopen-the-blog-for-new-challenge/" rel="alternate" type="text/html" title="重新開張迎接新的挑戰" /><published>2020-01-30T00:00:00+08:00</published><updated>2020-01-30T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/01/30/reopen-the-blog-for-new-challenge</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/01/30/reopen-the-blog-for-new-challenge/">&lt;p&gt;自從前年 30 天鐵人挑戰賽之後，一年沒有文章的地方，終於要重新開張啦。&lt;/p&gt;

&lt;p&gt;這次參加的是 &lt;a href=&quot;https://www.hexschool.com/2019/11/14/2019-11-14-w3Hexschool-2020-challenge/&quot;&gt;六角學院舉辦的 - 鼠年全馬鐵人挑戰&lt;/a&gt; 活動，&lt;/p&gt;

&lt;p&gt;每週一篇，長達一年的挑戰，相信會有不同的感受，&lt;/p&gt;

&lt;p&gt;事實上，這一篇文章是用來場勘的，確認 CI / CD 是否正常，&lt;/p&gt;

&lt;p&gt;免得臨時文章要上架時才發現要 debug 就麻煩了，&lt;/p&gt;

&lt;p&gt;新的一年，希望挑戰成功。&lt;/p&gt;

&lt;p&gt;註：絕對不是因為那個「實體獎座」才參加的喔~&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><summary type="html">自從前年 30 天鐵人挑戰賽之後，一年沒有文章的地方，終於要重新開張啦。</summary></entry><entry><title type="html">2019 iT 邦幫忙鐵人賽 完賽心得</title><link href="https://twblog.hongjianching.com/2018/10/30/2019-ithelp-ironman-30-days-challenge-review/" rel="alternate" type="text/html" title="2019 iT 邦幫忙鐵人賽 完賽心得" /><published>2018-10-30T00:00:00+08:00</published><updated>2018-10-30T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/30/2019-ithelp-ironman-30-days-challenge-review</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/30/2019-ithelp-ironman-30-days-challenge-review/">&lt;p&gt;第 30 天，很高興自己完成這個目標，一開始是想要有個經驗才臨時參賽的，不知道能不能順利完成，幸好有持續的堅持下去。&lt;/p&gt;

&lt;p&gt;一開始覺得 30 天很漫長，因為不知道要寫什麼，雖然有寫過部落格的經驗，加上手邊還有一些草稿筆記，總是會擔心很多狀況。決定 10/01 就開始發文則是因為跟文章數跟日期一樣比較好倒數這個理由，不然先用一個星期累積一定文章再發表的話，壓力應該會比較小一點。&lt;/p&gt;

&lt;h2 id=&quot;每日流程&quot;&gt;每日流程&lt;/h2&gt;

&lt;h3 id=&quot;決定主題&quot;&gt;決定主題&lt;/h3&gt;

&lt;p&gt;每天下班之後，回家要先想今天的主題是什麼，要考慮連貫性、難易性、規模大小，每天都要殺死好多個腦細胞才能決定。&lt;/p&gt;

&lt;h3 id=&quot;進行實驗&quot;&gt;進行實驗&lt;/h3&gt;

&lt;p&gt;決定主題之後開始架設環境、寫程式、做實驗，常常擔心實驗失敗了怎麼辦，會不會來不及，該不該換個主題等等的思緒。&lt;/p&gt;

&lt;h3 id=&quot;撰寫文章&quot;&gt;撰寫文章&lt;/h3&gt;
&lt;p&gt;實驗成功了趕快寫文章，一邊重覆實驗一邊截圖，發現中文需要加強，寫到一半跑去查「不止、不只」的差別，還有「畢竟」怎麼寫。&lt;/p&gt;

&lt;h3 id=&quot;發佈文章&quot;&gt;發佈文章&lt;/h3&gt;
&lt;p&gt;完成文章後很開心，但還要把文章成功發佈出去才算完成，有時候還會卡在這一步，像是當機事件。&lt;/p&gt;

&lt;h2 id=&quot;感想&quot;&gt;感想&lt;/h2&gt;
&lt;p&gt;在參賽前有先看過去年的文章，對於比賽在過了三分之二才正式開始深有同感。一方面是手邊的筆記用掉了，另一方面是實驗的難度提升，不確定性提高了。另外還有一次跟朋友聚餐，回家覺得有點累想睡覺，洗澡時才突然想起來今天還沒有寫文章，如果就跑去睡覺就中斷紀錄了。&lt;/p&gt;

&lt;h3 id=&quot;截稿的壓力&quot;&gt;截稿的壓力&lt;/h3&gt;

&lt;p&gt;整個過程印象中最深的是每天截稿的壓力，雖然字數限制要 300 字不算多，但是要做的事情也不少，常常趕著 12 點前發文。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-30-2019-ithelp-ironman-30-days-challenge-review/2018-10-05_23-41-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-30-2019-ithelp-ironman-30-days-challenge-review/2018-10-12_23-48-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-30-2019-ithelp-ironman-30-days-challenge-review/2018-10-26_23-51-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;kpi&quot;&gt;KPI&lt;/h3&gt;
&lt;p&gt;有一天突然發現，明明覺得是做 “同樣” 的事情，但是因為目標(KPI)不同，所以做的方法也跟著不同。以前是單純把一個主題寫完，可以分好幾天寫，也可以簡單幾個程式碼就完成一篇文章；但是這次挑戰有每日限制、字數限制，確實讓我的行為有所改變，像是文章要拆成兩篇不然寫不完，簡單的案例要額外補充資訊不然不到字數限制等等。&lt;/p&gt;

&lt;h3 id=&quot;當機事件&quot;&gt;當機事件&lt;/h3&gt;
&lt;p&gt;因為我沿用寫部落格的習慣，會先上傳到 Github，透過 GitLab CI 產生網頁，然後才把圖片網址貼到 iT 邦幫忙，結果中途遇到 &lt;a href=&quot;https://www.ithome.com.tw/news/126544&quot;&gt;Github 當機事件&lt;/a&gt;，還有 GitLab CI 忙錄的情況，都讓我覺得很緊張。&lt;/p&gt;

&lt;h3 id=&quot;總結&quot;&gt;總結&lt;/h3&gt;
&lt;p&gt;回顧一開始參賽目標&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;為明年鐵人賽準備&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了這次參賽經驗，相信對明年的挑戰有所幫助&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;清除堆積的筆記並增加部落格文章&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因為後來集中在 Docker 跟 Jenkins 主題，所以只清理了 5 篇文章。部落格文章本來只有 22 篇，這次挑戰增加了 30 篇，足足多了一倍以上。&lt;/p&gt;

&lt;p&gt;對於這次的挑戰覺得最有動力的是留言及訂閱通知以及 LIKE，讓我明白自己寫的文章真的有人在看，如果有幫到別人，花時間整理這些就值得了，謝謝大家。&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><summary type="html">第 30 天，很高興自己完成這個目標，一開始是想要有個經驗才臨時參賽的，不知道能不能順利完成，幸好有持續的堅持下去。</summary></entry><entry><title type="html">溝通，為什麼老闆聽不懂我說的</title><link href="https://twblog.hongjianching.com/2018/10/29/communication-why-the-boss-can't-understand-what-I-said/" rel="alternate" type="text/html" title="溝通，為什麼老闆聽不懂我說的" /><published>2018-10-29T00:00:00+08:00</published><updated>2018-10-29T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/29/communication-why-the-boss-can't-understand-what-I-said</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/29/communication-why-the-boss-can't-understand-what-I-said/">&lt;p&gt;有一天，在路邊&lt;del&gt;發呆&lt;/del&gt;玩寶可夢的時候，聽到這樣的對話&lt;/p&gt;

&lt;p&gt;小明：「跟你說喔，明明跟老闆說用這個方法比較好，但是他總是不同意」&lt;/p&gt;

&lt;p&gt;小華：「會不會老闆不懂你說的方法是什麼」&lt;/p&gt;

&lt;p&gt;小明：「對啊，我也想過這個可能，所以我有跟他說明這個方法如何如何」&lt;/p&gt;

&lt;p&gt;小華：「你說的很清楚很詳細啊，跟著外行老闆真可憐，辛苦你了」&lt;/p&gt;

&lt;p&gt;小明：「就是說啊，本來以為升職之後能夠大展身手的，沒想到反而受制連連，這個不好那個不行的」&lt;/p&gt;

&lt;p&gt;小華：「這樣還不如回到之前單純當個工程師更好」&lt;/p&gt;

&lt;p&gt;小明：「沒錯沒錯，可惜回不去了」&lt;/p&gt;

&lt;p&gt;小華：「那個老闆明明沒能力還不授權，這公司我看前景堪慮啊」&lt;/p&gt;

&lt;p&gt;小明：「唉，別提了，再講下去我都要哭了」&lt;/p&gt;

&lt;p&gt;上述的例子，可能很多人都聽過類似的對話，真實世界中，這些「故事」幾乎天天上演，很多人都想問「為什麼老闆聽不懂我說的呢？」&lt;/p&gt;

&lt;p&gt;這個劇情一再的上演，有些人可能會唉聲嘆氣，怨天尤人或者覺得老闆無所謂我又何必在乎。然後也有些人會自我檢討，開始研究如何訓練口才、製作簡報、提供專業能力，試著改善溝通能力。&lt;/p&gt;

&lt;p&gt;前者就不提了，可惜的是，就算是後者，也常常是屢戰屢敗，熱情漸漸的消磨。這些行動之所以沒有作用，在自己的經驗中，慢慢的領會了其中盲點，&lt;/p&gt;

&lt;p&gt;那就是「無效溝通」&lt;/p&gt;

&lt;p&gt;以實際的例子來說，目前軟體開發顯學 DevOps，當開發者想導入時，往往要向老闆提出建議，主題會放在 DevOps 的解釋，CI / CD 的解釋，Jenkins 工具的運用，帶來的好處及成本。&lt;/p&gt;

&lt;p&gt;如果得到的回覆是「需要更詳細的資訊」，或是「你說的很好，『但是』……」，「再考慮考慮」，雖然表面聽起來有機會，需要進一步努力，但其實代表著「無效溝通」。如果你的老闆夠「真實」的話，他會這麼回答你的「我對這個沒有興趣」，或者更直接的「這樣能夠幫公司賺錢嗎？」&lt;/p&gt;

&lt;p&gt;雖然聽到後面的說法衝擊非常大，但是這是進入真實世界的一記猛擊，也真正的代表之前的都是「無效溝通」，無效溝通之所以會被我覺得可怕的一點，就是很難有自覺。&lt;/p&gt;

&lt;p&gt;「無效溝通」常見的情況就是一昧的陳述自己想說的，而非理解對方的理念或處境。在無自覺的情況下，往往誤以為自己表達的能力不足，所以努力強化展示自己的意圖這個層面。&lt;/p&gt;

&lt;p&gt;「無效溝通」常發現在專業領域及非專業領域的衝突上，專業領域的人會努力的用各種專業術語來表達自己的意圖，但往往收到的成效很低。用一種最簡單的方法比喻，好比兩個說著不同語言的人在溝通，一個說中文一個說英文，當說中文的人發現對方不理解自己意圖時，拼了命了在中文文法上、字詞選擇上作強化，但是卻沒有效果。我想這個比喻大家都能簡單的明白，應該努力的方向很明顯，就是學習英文，只有學習對方的語言，才能進行有效溝通。&lt;/p&gt;

&lt;p&gt;從上面的比喻已經明白，要進行有效溝通，應該要學習「對方的語言」。有沒有想過，老闆的語言是什麼呢？如果你正面臨同樣的處境，身為專業的開發者，是否該跨出舒適圈，往外探索你所不曾踏入的區域呢？&lt;/p&gt;

&lt;h1 id=&quot;延深閱讀&quot;&gt;延深閱讀&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.projectup.net/article/view/id/5424&quot;&gt;向上管理的五個原則 - 專案管理生活思維&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><summary type="html">有一天，在路邊發呆玩寶可夢的時候，聽到這樣的對話</summary></entry><entry><title type="html">利用程式設計原則解釋職場困境</title><link href="https://twblog.hongjianching.com/2018/10/28/using-principles-of-programming-analysis-real-world/" rel="alternate" type="text/html" title="利用程式設計原則解釋職場困境" /><published>2018-10-28T00:00:00+08:00</published><updated>2018-10-28T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/28/using-principles-of-programming-analysis-real-world</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/28/using-principles-of-programming-analysis-real-world/">&lt;p&gt;正當我在麥當勞吃著嫩煎雞腿堡配著無糖綠邊看漫畫「關於我轉生變成史萊姆這檔事」時，突然耳朵不由自主的補捉到了後方不遠處傳來的一段對話&lt;/p&gt;

&lt;p&gt;小明：「唉~我真搞不懂 PM 在幹嘛，整天只會出張嘴，啥都不管，死都死其它人」&lt;/p&gt;

&lt;p&gt;小華：「總會安排需求跟時程管理吧？」&lt;/p&gt;

&lt;p&gt;小明：「需求就是客戶說的照單全收，問為什麼要這功能不清楚，問使用的情境也說不明白；時程就是說下星期要給，要大家儘量趕；唉，常常連規格書都沒有」&lt;/p&gt;

&lt;p&gt;小華：「疑？那老闆不管的嗎？」&lt;/p&gt;

&lt;p&gt;小明：「老闆只聽他的啊，還幫他說話呢，說都他一個人在承擔客戶的壓力，要多幫忙他」&lt;/p&gt;

&lt;p&gt;小華：「有個狀況外的老闆當他靠山，那我想沒救了」&lt;/p&gt;

&lt;p&gt;小明：「唉，別提了，再講下去我都要哭了」&lt;/p&gt;

&lt;p&gt;聽完對話，感覺就是一個無能的 PM 加上一個可憐的工程師，面對這種情況，我想身為工程師是無能為力的。&lt;del&gt;反正是別人的事&lt;/del&gt;，正當準備將注意力拉回手邊的漫畫時，突然靈光一閃，想到了程式設計原則，下面為了方便說明，給對話中的 PM 起了小王這個名字。&lt;/p&gt;

&lt;p&gt;從對話中分析，小王有六個功能&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;完成專案&lt;/li&gt;
  &lt;li&gt;需求管理&lt;/li&gt;
  &lt;li&gt;時程管理&lt;/li&gt;
  &lt;li&gt;規格書撰寫&lt;/li&gt;
  &lt;li&gt;需求訪談&lt;/li&gt;
  &lt;li&gt;處理客訴&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;小明有一個功能&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;實作需求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;畫成 UML 是這個樣子&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-28-using-principles-of-programming-analysis-real-world/2018-10-28_21-15-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;基於單一責任原則，我們可以把面對客戶的部份跟面對專案的部份分開，小王被拆成小王1跟小王2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-28-using-principles-of-programming-analysis-real-world/2018-10-28_21-15-29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一個人怎麼可能會變成兩個？這明顯不可能。幸好，我們還有接口隔離原則，將功能從人上抽離出來建立角色，小王1是面對專案的部份，角色為專案經理，小王2是面對客戶的部份，角色為業務，小明的角色是工程師&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-28-using-principles-of-programming-analysis-real-world/2018-10-28_21-15-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好的，就算拆解完 UML 圖，好棒好厲害，那對這件事情有什麼幫助？&lt;/p&gt;

&lt;p&gt;因為上面這張圖是理想中的畫面，回頭看對話，其實會發現小王對於 PM 這個角色的功能實現幾乎沒有&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-28-using-principles-of-programming-analysis-real-world/2018-10-28_21-15-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到這邊，也許你會發現，原來小王根本不是 PM 啊！這是在程式設計中很常發現的壞味道，一個類別做的事情跟名稱不符，這時候就會需要進行最簡單但重要的重構，rename&lt;/p&gt;

&lt;p&gt;不過這還不是我想表達的重點。分析完畢後，我的疑問是，小明真的無能為力嗎？&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><summary type="html">正當我在麥當勞吃著嫩煎雞腿堡配著無糖綠邊看漫畫「關於我轉生變成史萊姆這檔事」時，突然耳朵不由自主的補捉到了後方不遠處傳來的一段對話</summary></entry><entry><title type="html">薛丁格的敏捷教練</title><link href="https://twblog.hongjianching.com/2018/10/27/schrodinger's-agile-coach/" rel="alternate" type="text/html" title="薛丁格的敏捷教練" /><published>2018-10-27T00:00:00+08:00</published><updated>2018-10-27T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/27/schrodinger's-agile-coach</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/27/schrodinger's-agile-coach/">&lt;p&gt;這是參加 &lt;a href=&quot;https://summit.ithome.com.tw/agile/&quot;&gt;Agile Summit 2018&lt;/a&gt; 其中一場，由 Evelyn Tian 演講的&lt;a href=&quot;https://s.itho.me/summit/2018/agile/pdf/Day2-K-03.pdf&quot;&gt;敏捷、蘑菇和西藏之旅&lt;/a&gt;其中的一張圖片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-27-schrodinger's-agile-coach/2018-10-27_22-31-38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我將這三條線從上到下理解為「成功的敏捷教練的團隊成效」、「失敗的敏捷教練的團隊成效」、「沒有敏捷教練的團隊成效」&lt;/p&gt;

&lt;p&gt;其中「沒有敏捷教練的團隊成效」是最常聽到「敏捷無用、Scrum 試過無效」最常發生的情況，往往自學自通，甚至是「Scurm 自助餐」，只挑幾個不太需要變革的事情來做，有種柿子挑軟的吃的感覺。結果就是雖然短期似乎有些微改善，但是長期來說沒有變化。&lt;/p&gt;

&lt;p&gt;「失敗的敏捷教練的團隊成效」則是成功的帶領團隊成長，突破，達到了之前不能及的高度。但是，在敏捷教練離開之後，團隊的成果開始下降，雖然短期有所突破，但是卻是長期向下的趨勢。&lt;/p&gt;

&lt;p&gt;最後「成功的敏捷教練的團隊成效」同樣是成功的帶領團隊成長，不同的是當教練離開之後，團隊還能持續的突破，一次一次的邁向新的高峰。&lt;/p&gt;

&lt;p&gt;成功和失敗的團隊，其中很重要的差別在於是否只是單純學到招式，而非心法。真實的環境中一直在改變，如果只是學了招式，雖然短期內成效很好，但是無法應對變化。當明白了每件事背後為什麼要做，就可以自在的變化，面對未來的挑戰&lt;/p&gt;

&lt;p&gt;看圖說故事很簡單，如果要你挑一個教練，當然會想挑上面那個，但是讓我們離開上帝視角，看看下面這張圖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-27-schrodinger's-agile-coach/2018-10-27_22-31-38-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;當計劃進行中，其實我們是無法分辨兩者的差異，在這個時間點，成功的敏捷教練跟失敗的敏捷教練同時存在，所謂的「薛丁格的敏捷教練」&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><summary type="html">這是參加 Agile Summit 2018 其中一場，由 Evelyn Tian 演講的敏捷、蘑菇和西藏之旅其中的一張圖片</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - Shared Libraries</title><link href="https://twblog.hongjianching.com/2018/10/26/jenkins-pipeline-as-code-shared-libraries/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - Shared Libraries" /><published>2018-10-26T00:00:00+08:00</published><updated>2018-10-26T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/26/jenkins-pipeline-as-code-shared-libraries</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/26/jenkins-pipeline-as-code-shared-libraries/">&lt;p&gt;&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/25/jenkins-pipeline-as-code-dynamic-parallel/&quot;&gt;前一篇&lt;/a&gt;將 Jenkinsfile 內共用的部份重構為一份，那如果是不同的專案之間要共用呢？像這一連串文章，Jenkinsfile 改了無數次，如果有十幾個甚至幾十個專案不就要一直復制貼上，重覆這個動作好幾次？&lt;/p&gt;

&lt;p&gt;我們可以透過 Jenkins Shared Libraries 機制來達到程式碼共用，這邊我們示範單純把整個 Jenkinsfile 封裝起來的方法&lt;/p&gt;

&lt;p&gt;首先將原本的 Jenkinsfile 復制到新的檔案 &lt;strong&gt;vars/commonPipeline.groovy&lt;/strong&gt; 並且用 def call() 包起來，像這樣&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def call() {
    pipeline {
        agent none
        stages {

… 略 …

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著要把 shared libraries 註冊到 Jenkins，在主頁 &amp;gt; 管理 Jenkins &amp;gt; 設定系統 &amp;gt; Global Pipeline Libraries 新增一組 libary，設定如下&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name: pipeline-library&lt;/li&gt;
  &lt;li&gt;Default version: shared-libraries&lt;/li&gt;
  &lt;li&gt;選擇 Modern SCM&lt;/li&gt;
  &lt;li&gt;選擇 Git&lt;/li&gt;
  &lt;li&gt;Project Repository: https://github.com/allyusd/jenkins-pipeline.git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;填完之後按下儲存，這樣 Jenkins 就知道要去哪裡取得 libary&lt;/p&gt;

&lt;p&gt;接著修改 Jenkinsfile，先載入 libary，再呼叫 commonPipeline&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Library('pipeline-library') _

commonPipeline()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這麼一來，所有的專案的 Jenkinsfile 就只是轉呼叫 commonPipeline，之後只要修改 commonPipeline，所有的專案都會一起更新的，因為他們使用同一份 libary&lt;/p&gt;

&lt;h1 id=&quot;ref&quot;&gt;ref&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;Extending with Shared Libraries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jenkins.io/blog/2017/10/02/pipeline-templates-with-shared-libraries/&quot;&gt;Share a standard Pipeline across multiple projects with Shared Libraries&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">前一篇將 Jenkinsfile 內共用的部份重構為一份，那如果是不同的專案之間要共用呢？像這一連串文章，Jenkinsfile 改了無數次，如果有十幾個甚至幾十個專案不就要一直復制貼上，重覆這個動作好幾次？</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 動態平行工作</title><link href="https://twblog.hongjianching.com/2018/10/25/jenkins-pipeline-as-code-dynamic-parallel/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 動態平行工作" /><published>2018-10-25T00:00:00+08:00</published><updated>2018-10-25T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/25/jenkins-pipeline-as-code-dynamic-parallel</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/25/jenkins-pipeline-as-code-dynamic-parallel/">&lt;p&gt;前一篇介紹&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/24/jenkins-pipeline-as-code-parallel/&quot;&gt;平行工作&lt;/a&gt;，但是每個 stage 其實是一樣的東西，明明重覆的事情要寫好幾遍很討厭，能不能動態產生呢？&lt;/p&gt;

&lt;p&gt;先消除重覆的部份，透過 script 來執成&lt;/p&gt;

&lt;p&gt;宣告兩個變數，分別是存放平行工作的 tasks 及存放 image 列表的 imagelist&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def tasks = [:]
def imagelist = ['maven:3-alpine', 'ubuntu:18.04', 'base/archlinux']
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著透過 for 迴圈將 imagelist 都執行一遍，內容是定義每個 task 要做的事情&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (image in imagelist) {
    def image_inside = &quot;${image}&quot;
    tasks[&quot;${image}&quot;] = {
        node('docker') {
            stage(&quot;${image_inside}&quot;) {
                docker.image(&quot;${image_inside}&quot;).inside {
                    sh &quot;echo ${image_inside}&quot;
                    sh 'cat /etc/*-release'
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面這段程式要特別注意的是其中 &lt;strong&gt;def image_inside = “${image}”&lt;/strong&gt;，這是不能拿掉的喔！另外 &lt;strong&gt;docker.image&lt;/strong&gt; 這段是為了執行在 docker image 內，如果是一般的 agent 是不需要這段的。&lt;/p&gt;

&lt;p&gt;雖然這樣已經達到目的了，但是之後要增加 image 還要需要修改 Jenkinsfile，可能的話當然是希望將可能變動的部份抽離出來。&lt;/p&gt;

&lt;p&gt;要讓 Jenkinfile 不需要修改，可以透過外部檔案來設定 imagelist，所以我們要讀取檔案，並且設定到 imagelist 陣列中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def imagelist = readFile('imagelist').replace(&quot;\n&quot;, &quot;&quot;).split(',')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;上面的指令，先是讀取 imagelist 檔案，移除換行符號之後，依照逗號分隔項目，最後存進 imagelist&lt;/p&gt;

&lt;p&gt;而 imagelist 檔案的內容則是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;maven:3-alpine,ubuntu:18.04,base/archlinux
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整的檔案在 &lt;a href=&quot;https://github.com/allyusd/jenkins-pipeline/tree/agent-docker-dynamic-parallel&quot;&gt;這裡&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ref&quot;&gt;ref&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://devops.stackexchange.com/questions/3073/how-to-properly-achieve-dynamic-parallel-action-with-a-declarative-pipeline/3090#3090&quot;&gt;jenkins - How to properly achieve dynamic parallel action with a declarative pipeline? - DevOps Stack Exchange&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/42652533/limiting-jenkins-pipeline-to-running-only-on-specific-nodes?rq=1&quot;&gt;Limiting Jenkins pipeline to running only on specific nodes - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.jenkins-ci.org/browse/JENKINS-44086&quot;&gt;[JENKINS-44086] Parallel nodes for scripted pipelines cannot be clicked - Jenkins JIRA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37594635/why-an-each-loop-in-a-jenkinsfile-stops-at-first-iteration&quot;&gt;jenkins - Why an each loop in a Jenkinsfile stops at first iteration - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22917491/reading-file-from-workspace-in-jenkins-with-groovy-script&quot;&gt;Reading file from Workspace in Jenkins with Groovy script - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/docker/&quot;&gt;Using Docker with Pipeline&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">前一篇介紹平行工作，但是每個 stage 其實是一樣的東西，明明重覆的事情要寫好幾遍很討厭，能不能動態產生呢？</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 平行工作</title><link href="https://twblog.hongjianching.com/2018/10/24/jenkins-pipeline-as-code-parallel/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 平行工作" /><published>2018-10-24T00:00:00+08:00</published><updated>2018-10-24T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/24/jenkins-pipeline-as-code-parallel</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/24/jenkins-pipeline-as-code-parallel/">&lt;p&gt;在之前的範例中，我們都是使用連續流程 pipeline，當某一個 stage 失敗，則剩餘的 stage 直接跳過不再執行，以流水線來說這是正確的。&lt;/p&gt;

&lt;p&gt;一般流水線的基本 stage 是 build, test, deploy，當 build 失敗的時候，意味著下一個 test stage 勢必沒有辦法執行，所以直接跳過這個 stage。而 test 失敗的時候，表示沒有通過測試，不應該進行 deploy。&lt;/p&gt;

&lt;p&gt;但是，有個情況是，假如我是一個網頁程式，想要測試時跑在 chrome, firefox, ie 等環境，這時三者之間獨立存在，彼此沒有關聯。假如在 chrome 失敗了，並不代表在 firefox 及 ie 會失敗，所以不應該直接跳過，這時三個 stage 就應該是平行工作。&lt;/p&gt;

&lt;p&gt;接下來的測試借用前一篇&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/23/jenkins-pipeline-as-code-run-docker-image/&quot;&gt;Jenkins - Pipeline as Code - 啟動 Docker Image&lt;/a&gt;的範例來示範，原先執行了三個 docker image，我們現在故意讓第一個失敗，把 image 改為不存在的 &lt;strong&gt;non-exist:fail&lt;/strong&gt; 看看結果&lt;/p&gt;

&lt;p&gt;(已建立的檔案在 &lt;strong&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/strong&gt;，故意失敗的 branch 為 &lt;strong&gt;agent-docker-fail&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;從 Stage View 來看，只知道三個 stage 都是 failed 的結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-41-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;實際到 Logs 確認後，可以發現第一個 stage 失敗之後，後續兩個 stage 直接跳過了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-39-29.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;為了達到平行工作的目的，我們可以使用 &lt;strong&gt;parallel&lt;/strong&gt; 關鍵字，透過平行宣告，讓這三個 stage 不再有上下流的關係。&lt;/p&gt;

&lt;p&gt;原本的 Jenkinsfile 修改後如下&lt;/p&gt;

&lt;p&gt;(branch 為 &lt;strong&gt;agent-docker-parallel&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline {
    agent none
    stages {
        stage('parallel') {
            parallel {
                stage('alpine') {
                    agent {
                        docker {
                            label 'docker'
                            image 'maven:3-alpine'
                        }
                    }
                    steps {
                        sh 'cat /etc/*-release'
                    }
                }
                stage('ubuntu') {
                    agent {
                        docker {
                            label 'docker'
                            image 'ubuntu:18.04'
                        }
                    }
                    steps {
                        sh 'cat /etc/*-release'
                    }
                }
                stage('archlinux') {
                    agent {
                        docker {
                            label 'docker'
                            image 'base/archlinux'
                        }
                    }
                    steps {
                        sh 'cat /etc/*-release'
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功執行的情況跟原本的沒太大差別，只是多了一個 parallel stage，事實上沒有做什麼事情。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-47-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著把平行版本給弄壞，同樣讓第一個 stage 改成不存在的 image&lt;/p&gt;

&lt;p&gt;(branch 為 &lt;strong&gt;agent-docker-parallel-fail&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;執行後的 Stage View 明顯看出只有第一個 stage 是 failed，其它兩個 stage 都有順利執行，如果是在程式除錯的情況下，就會往第一個環境與其它不同的部份去 debug，為開發人員提供很好的判斷資訊&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-51-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;改成平行工作，除了讓 stage 消除上下流關係，提供開發人員除錯資訊外，因為彼此獨立，所以如果在有多個可使用 agent 的情況下，是真的可以平行進行的喔。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-56-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上圖表示同樣是 #6，但是一個在執行的時候，還有兩個在佇列中等候，如果幫 Jenkins 再安裝兩個 agent，就可以看到同時進行喔！&lt;/p&gt;

&lt;p&gt;等等，突然想到目前的執行環境是使用 docker image，環境互不影響，那我只要將 ubuntu-18.04 agent &lt;strong&gt;執行程式數量&lt;/strong&gt; 設定為 3 就可以展示效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-24-jenkins-pipeline-as-code-parallel/2018-10-24_22-59-36.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">在之前的範例中，我們都是使用連續流程 pipeline，當某一個 stage 失敗，則剩餘的 stage 直接跳過不再執行，以流水線來說這是正確的。</summary></entry></feed>