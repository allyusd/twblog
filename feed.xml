<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://twblog.hongjianching.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://twblog.hongjianching.com/" rel="alternate" type="text/html" /><updated>2020-12-26T20:54:47+08:00</updated><id>https://twblog.hongjianching.com/</id><title type="html">Jian-Ching 記事本</title><subtitle>An notebook website.</subtitle><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><entry><title type="html">減少 Node.Js Docker image 容量大小</title><link href="https://twblog.hongjianching.com/2020/12/26/reduce-node-js-docker-image-size/" rel="alternate" type="text/html" title="減少 Node.Js Docker image 容量大小" /><published>2020-12-26T00:00:00+08:00</published><updated>2020-12-26T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/12/26/reduce-node-js-docker-image-size</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/12/26/reduce-node-js-docker-image-size/">&lt;h2 id=&quot;改用-alpine-系列-image&quot;&gt;改用 alpine 系列 image&lt;/h2&gt;

&lt;p&gt;第一點可以修改的是 base image 改用 alpine，這點很多地方都有提到，不多說。&lt;/p&gt;

&lt;h2 id=&quot;yarn-install-production&quot;&gt;yarn install –production&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--production&lt;/code&gt; 參數表示只安裝 package.json 裡面 dependencies 的套件，
不安裝 devDependencies 的套件，devDependencies 表示開發才需要的套件。&lt;/p&gt;

&lt;p&gt;ps 1：在 CI 安裝後，通常會加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;--frozen-lockfile&lt;/code&gt; 讓 yarn 完全依照 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; 安裝
確保 CI 跟開發環境一致，完整指令：&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install --production --frozen-lockfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ps 2：&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; 指令會讓所有套件都安裝，包含 devDependencies，
不要在 CI 過程中使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn add&lt;/code&gt; 指令，會破壞這個原則。&lt;/p&gt;

&lt;h2 id=&quot;yarn-cache-clean&quot;&gt;yarn cache clean&lt;/h2&gt;

&lt;p&gt;yarn 為了加速套件安裝，會在本地暫存一份 cache，但是在 image 不需要這個，
原理跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install&lt;/code&gt; 一樣，在安裝套件後清除本地快取，
完整指令：&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install --production --frozen-lockfile &amp;amp;&amp;amp; yarn cache clean&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;完整-dockerfile&quot;&gt;完整 Dockerfile&lt;/h2&gt;

&lt;p&gt;以 Actionhero 為範例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;FROM node:12.19.1-alpine

WORKDIR /app

# 需要 packagejson 跟 yarn.lock 提供版本資訊
COPY package.json yarn.lock ./

# --production 不安裝 dev 相關套件
# --frozen-lockfile 強制安裝 yarn.lock 套件
# NOYARNPOSTINSTALL=1 跳過 postinstall
RUN NOYARNPOSTINSTALL=1 yarn --production --frozen-lockfile &amp;amp;&amp;amp; yarn cache clean

# actionhero 會在這個目錄建立 websocker js file
RUN mkdir -p public/javascript/

# backend
COPY dist dist

# frontend
COPY public public

EXPOSE 8080
CMD [ &quot;node&quot;, &quot;dist/server.js&quot; ]
&lt;/code&gt;&lt;/pre&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Docker" /><category term="Dockerfile" /><summary type="html">改用 alpine 系列 image</summary></entry><entry><title type="html">在 GitLab Piepeline 使用 TypeScript 當 script 使用</title><link href="https://twblog.hongjianching.com/2020/12/19/run-typescript-as-script-in-gitlab-pipeline/" rel="alternate" type="text/html" title="在 GitLab Piepeline 使用 TypeScript 當 script 使用" /><published>2020-12-19T00:00:00+08:00</published><updated>2020-12-19T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/12/19/run-typescript-as-script-in-gitlab-pipeline</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/12/19/run-typescript-as-script-in-gitlab-pipeline/">&lt;h2 id=&quot;問題&quot;&gt;問題&lt;/h2&gt;

&lt;p&gt;本來在 GitLab Piepeline 主要使用 bash 寫 script，
簡單的還好處理，稍微複雜一點的邏輯，可讀性跟維護性都不高。
加上目前開發主要使用 TypeScript，所以就興起把 TypeScript 當 script 使用，取代 bash 的想法。&lt;/p&gt;

&lt;h2 id=&quot;結果&quot;&gt;結果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-12-19/2020-12-19-222427.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gitlab-pipleline-yaml-示範&quot;&gt;GitLab Pipleline YAML 示範&lt;/h2&gt;

&lt;p&gt;使用 node.js image，不然要先安裝 node.js 相關的套件&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:12.16.1&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add typescript&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add ts-node&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ts-node helloworld.ts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;說明&quot;&gt;說明&lt;/h2&gt;

&lt;p&gt;想要把 typescript 當 script，要安裝 typescript 及 ts-node
為了避免影響 local project 的 package.json，所以使用 global 安裝
為了區隔，在 yml 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;before_script&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;前置準備&quot;&gt;前置準備&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add typescript&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add ts-node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;執行&quot;&gt;執行&lt;/h3&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ts-node helloworld.ts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;其它套件&quot;&gt;其它套件&lt;/h2&gt;

&lt;p&gt;如果要使用 fs 之類 node.js 的函式庫，需要安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;@types/node&lt;/code&gt;，所以需要 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@types/node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^14.11.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;似乎因為 ts 會去找 &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; 檔案，所以同層給一個檔案才不會跑掉
可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;tsc --init&lt;/code&gt; 產生檔案&lt;/p&gt;

&lt;h2 id=&quot;檔案夾隔離&quot;&gt;檔案夾隔離&lt;/h2&gt;

&lt;p&gt;因為本身已經是 TypeScript 專案，所以相關的 script 放在獨立資料夾 &lt;code class=&quot;highlighter-rouge&quot;&gt;ci&lt;/code&gt; 下。&lt;/p&gt;

&lt;h2 id=&quot;完整版的-yaml&quot;&gt;完整版的 YAML&lt;/h2&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:12.16.1&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run-script&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add typescript&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn global add ts-node&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd ci&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yarn&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd ..&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd ci&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ts-node main.ts&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd ..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="GitLab" /><category term="TypeScript" /><summary type="html">問題</summary></entry><entry><title type="html">在 GitLab 不使用 Docker-in-Docker 模式建立 Docker Image</title><link href="https://twblog.hongjianching.com/2020/12/12/build-docker-image-without-docker-in-docker-on-gitlab/" rel="alternate" type="text/html" title="在 GitLab 不使用 Docker-in-Docker 模式建立 Docker Image" /><published>2020-12-12T00:00:00+08:00</published><updated>2020-12-12T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/12/12/build-docker-image-without-docker-in-docker-on-gitlab</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/12/12/build-docker-image-without-docker-in-docker-on-gitlab/">&lt;h2 id=&quot;問題&quot;&gt;問題&lt;/h2&gt;

&lt;p&gt;當需要在 docker 中使用 docker 指令，像是建立 image 時，就會碰到 Docker-in-Docker 模式。
但是 Docekr-in-Docker 有兩個主要問題：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要 privileged 權限，這會帶來安全性問題&lt;/li&gt;
  &lt;li&gt;效能下降&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;結果&quot;&gt;結果&lt;/h2&gt;

&lt;p&gt;透過 GitLab 執行，成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-12-12/2020-12-13-001210.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用-kaniko&quot;&gt;使用 kaniko&lt;/h2&gt;

&lt;p&gt;kaniko 是 google 開發用來在 Kubernets 下建立 image 的工具。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/kaniko&quot;&gt;GoogleContainerTools/kaniko: Build Container Images In Kubernetes&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;在-gitlab-中的使用&quot;&gt;在 GitLab 中的使用&lt;/h2&gt;

&lt;p&gt;GitLab 提供了整合範例，這個例子會依照該專案下的 Dockerfile 建立 Image 並且上傳到 GitLab 的 Container Registry。&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gcr.io/kaniko-project/executor:debug&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;entrypoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mkdir -p /kaniko/.docker&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;{\&quot;auths\&quot;:{\&quot;$CI_REGISTRY\&quot;:{\&quot;username\&quot;:\&quot;$CI_REGISTRY_USER\&quot;,\&quot;password\&quot;:\&quot;$CI_REGISTRY_PASSWORD\&quot;}}}&quot; &amp;gt; /kaniko/.docker/config.json&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_COMMIT_TAG&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/docker/using_kaniko.html&quot;&gt;Building images with kaniko and GitLab CI/CD - GitLab&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="GitLab" /><category term="Docker" /><summary type="html">問題</summary></entry><entry><title type="html">解決 Puppeteer 在 Github Action 失敗的問題</title><link href="https://twblog.hongjianching.com/2020/11/29/fix-puppeteer-fail-in-github-action/" rel="alternate" type="text/html" title="解決 Puppeteer 在 Github Action 失敗的問題" /><published>2020-11-29T00:00:00+08:00</published><updated>2020-11-29T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/11/29/fix-puppeteer-fail-in-github-action</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/11/29/fix-puppeteer-fail-in-github-action/">&lt;h2 id=&quot;問題&quot;&gt;問題&lt;/h2&gt;

&lt;p&gt;Actionhero 發了一個 PR，將 Puppeteer 當作 Web 測試工具，雖然在他開發環境上可以正常執行，但是在Github Action 卻無法通過。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/actionhero/actionhero/pull/1562&quot;&gt;Browser tests with Puppeteer rather than Selenium by evantahler · Pull Request #1562 · actionhero/actionhero&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;結果&quot;&gt;結果&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-11-29/2020-11-29-144029.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;問題分析&quot;&gt;問題分析&lt;/h2&gt;

&lt;p&gt;從環境不同導致結果不同來看，很可能是相依性造成的，在透過 google 查詢關鍵字之後，發現很有用的文章，尤其是這篇關於 puppeteer 3 以上 在 Ubuntu 的回應。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer/issues/3443#issuecomment-629662626&quot;&gt;Ubuntu 18.04 Headless Chrome Node API - Puppeteer - Installation Guide · Issue #3443 · puppeteer/puppeteer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;修改原始碼&quot;&gt;修改原始碼&lt;/h2&gt;

&lt;p&gt;在找到問題的解決方案後，在 ci 的 yaml 上加上相依套件的安裝&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; apt-get install -y libgtk2.0-0 libgtk-3-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb libgbm-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以及在 puppeteer.launch 時加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;no-sandbox&lt;/code&gt; 參數&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;puppeteer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;headless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--no-sandbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後完整的修改紀錄&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/actionhero/actionhero/pull/1654&quot;&gt;fixed ci fail for puppeteer by allyusd · Pull Request #1654 · actionhero/actionhero&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;這是第二次在 Actionhero 發的 PR，但是第一個在 Actionhero 被接受合併的 PR，留個紀錄紀念一下&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Puppeteer" /><category term="Github-Action" /><category term="DevOps" /><summary type="html">問題</summary></entry><entry><title type="html">Actionhero 在 action 的 inputs 使用系統保留字</title><link href="https://twblog.hongjianching.com/2020/06/21/actionhero-action-inputs-using-reserved-params/" rel="alternate" type="text/html" title="Actionhero 在 action 的 inputs 使用系統保留字" /><published>2020-06-21T00:00:00+08:00</published><updated>2020-06-21T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/06/21/actionhero-action-inputs-using-reserved-params</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/06/21/actionhero-action-inputs-using-reserved-params/">&lt;h2 id=&quot;問題&quot;&gt;問題&lt;/h2&gt;

&lt;p&gt;Actionhero 中每個 action 都可以透過定義 inputs，當 action 呼叫時的傳入參考，
但是當使用到 Actionhero 本身的保留字時，就會發生不明的錯誤。&lt;/p&gt;

&lt;h2 id=&quot;問題範例&quot;&gt;問題範例&lt;/h2&gt;

&lt;p&gt;像是在 inputs 中定義了 &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;apiVersion&lt;/code&gt; 的話。&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整範例請點 &lt;a href=&quot;https://github.com/allyusd/actionhero-action-inputs-using-reserved-params/blob/master/src/actions/usingReservedParams.ts&quot;&gt;這裡&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;呼叫 action 的時候，會一直得到錯誤 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;error&quot;: &quot;unknown action or invalid apiVersion&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;修改原始碼&quot;&gt;修改原始碼&lt;/h2&gt;

&lt;p&gt;在跟作者討論後，試著在 &lt;code class=&quot;highlighter-rouge&quot;&gt;classes/action.ts&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;validate()&lt;/code&gt; 加上驗證，
所有 action 的 inputs 不能包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;initializers/params.ts&lt;/code&gt; 定義的 &lt;code class=&quot;highlighter-rouge&quot;&gt;api.params.globalSafeParams&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但是發現 &lt;code class=&quot;highlighter-rouge&quot;&gt;validate()&lt;/code&gt; 是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;initializers/actions.ts&lt;/code&gt; 中呼叫的，而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadPriority&lt;/code&gt; 高於 params，
試著調整 priority 後才發現，原來 params 中有使用到 &lt;code class=&quot;highlighter-rouge&quot;&gt;api.actions&lt;/code&gt;，這下 deadlock……&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/actionhero/actionhero/blob/master/src/classes/action.ts#L77-L95&quot;&gt;actionhero/action.ts at master · actionhero/actionhero&lt;/a&gt;
&lt;a href=&quot;https://github.com/actionhero/actionhero/blob/master/src/initializers/params.ts#L25-L31&quot;&gt;actionhero/params.ts at master · actionhero/actionhero&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="ActionHero" /><summary type="html">問題</summary></entry><entry><title type="html">使用 yarn install 指令安裝套件時鎖定 yarn.lock 版本</title><link href="https://twblog.hongjianching.com/2020/06/14/yarn-install-lock-version-by-yarn.lock/" rel="alternate" type="text/html" title="使用 yarn install 指令安裝套件時鎖定 yarn.lock 版本" /><published>2020-06-14T00:00:00+08:00</published><updated>2020-06-14T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/06/14/yarn-install-lock-version-by-yarn.lock</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/06/14/yarn-install-lock-version-by-yarn.lock/">&lt;h2 id=&quot;--frozen-lockfile-參數&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--frozen-lockfile&lt;/code&gt; 參數&lt;/h2&gt;

&lt;p&gt;當想要完全依照 yarn.lock 中指定版本安裝時，像是 CI 的時候，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--frozen-lockfile&lt;/code&gt; 參數&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn install --frozen-lockfile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;指定-cache-目錄&quot;&gt;指定 cache 目錄&lt;/h2&gt;

&lt;p&gt;在 CI 使用的時候，可能會需要指定 yarn 的 cache 目錄，可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;--cache-folder&lt;/code&gt; 參數&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&amp;gt; --cache-folder &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;從-npm-轉為-yarn&quot;&gt;從 npm 轉為 yarn&lt;/h2&gt;

&lt;p&gt;如果本來專案使用的是 npm，要改為 yarn 的話，必需將 package-lock.json 轉為 yarn.lock&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn import
rm -rf node_modules
yarn install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://classic.yarnpkg.com/en/docs/cli/install/&quot;&gt;yarn install - Yarn&lt;/a&gt;
&lt;a href=&quot;https://classic.yarnpkg.com/en/docs/cli/cache&quot;&gt;yarn cache - Yarn&lt;/a&gt;
&lt;a href=&quot;https://github.com/yarnpkg/yarn/issues/4379&quot;&gt;yarn install changes yarn.lock file · Issue #4379 · yarnpkg/yarn&lt;/a&gt;
&lt;a href=&quot;https://github.com/yarnpkg/yarn/issues/4147&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install --frozen-lockfile&lt;/code&gt; should be the default behavior · Issue #4147 · yarnpkg/yarn&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="yarn" /><summary type="html">--frozen-lockfile 參數</summary></entry><entry><title type="html">啟用 Nginx 狀態功能並且使用 Grafana</title><link href="https://twblog.hongjianching.com/2020/06/07/enable-nginx-status-with-grafana/" rel="alternate" type="text/html" title="啟用 Nginx 狀態功能並且使用 Grafana" /><published>2020-06-07T00:00:00+08:00</published><updated>2020-06-07T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/06/07/enable-nginx-status-with-grafana</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/06/07/enable-nginx-status-with-grafana/">&lt;p&gt;從 Grafana 看到的結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-07/2020-06-07_20-13-21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;開啟-nginx-狀態&quot;&gt;開啟 Nginx 狀態&lt;/h2&gt;

&lt;p&gt;預設的 docker image 已經有內建 ngx_http_stub_status_module，
可以透過設定檔開啟這個功能&lt;/p&gt;

&lt;p&gt;nginx.conf&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; = /&lt;span class=&quot;n&quot;&gt;basic_status&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;stub_status&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以查詢目前的狀態&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-06-07/2020-06-07_20-12-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_stub_status_module.html&quot;&gt;Module ngx_http_stub_status_module&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Nginx" /><category term="Grafana" /><summary type="html">從 Grafana 看到的結果</summary></entry><entry><title type="html">Sequelize 進行 Raw Query 遇到 SQL Injection 問題</title><link href="https://twblog.hongjianching.com/2020/05/31/sequelize-raw-query-meet-sql-injection-issue/" rel="alternate" type="text/html" title="Sequelize 進行 Raw Query 遇到 SQL Injection 問題" /><published>2020-05-31T00:00:00+08:00</published><updated>2020-05-31T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/05/31/sequelize-raw-query-meet-sql-injection-issue</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/05/31/sequelize-raw-query-meet-sql-injection-issue/">&lt;p&gt;Sequelize 除了使用 Model Query 之外，還可以透過 SQL 語法直接進行 Raw Query，但是會碰上 SQL Injection 問題&lt;/p&gt;

&lt;h2 id=&quot;model-query&quot;&gt;Model Query&lt;/h2&gt;

&lt;p&gt;這是使用 Model Query 方法的範例&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Model Query&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;way1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TW'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'createTime'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DESC'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;raw-queries---sql-injection&quot;&gt;Raw Queries - SQL Injection&lt;/h2&gt;

&lt;p&gt;這是直接使用 SQL 語法進行查詢，但是會造成 SQL Injection 的範例&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;way2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sl&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TW'&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createTime&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;desc&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapToModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pass true here if you have any mapped fields&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;raw-queries&quot;&gt;Raw Queries&lt;/h2&gt;

&lt;p&gt;這是把參數安全替換，解決 SQL Injection 的範例&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;way3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sl&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TW'&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createTime&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;desc&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;account&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShoppingLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replacements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;replacements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mapToModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pass true here if you have any mapped fields&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://sequelize.org/master/manual/raw-queries.html&quot;&gt;Manual - Sequelize&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Sequelize" /><category term="SQL-Injection" /><summary type="html">Sequelize 除了使用 Model Query 之外，還可以透過 SQL 語法直接進行 Raw Query，但是會碰上 SQL Injection 問題</summary></entry><entry><title type="html">使用 Grafana Influxdb Telegraf 監控系統</title><link href="https://twblog.hongjianching.com/2020/05/23/grafana-influxdb-telegraf-system-monitor/" rel="alternate" type="text/html" title="使用 Grafana Influxdb Telegraf 監控系統" /><published>2020-05-23T00:00:00+08:00</published><updated>2020-05-23T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/05/23/grafana-influxdb-telegraf-system-monitor</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/05/23/grafana-influxdb-telegraf-system-monitor/">&lt;p&gt;系統運作一段時間之後，想要知道最近狀況是否正常，卻沒有紀錄可以查詢跟比較。為了解決這個情況，需要一套監控系統，這裡使用 Grafana Influxdb Telegraf 解決方案。&lt;/p&gt;

&lt;h2 id=&quot;成果&quot;&gt;成果&lt;/h2&gt;

&lt;p&gt;擁有一個可以查詢系統狀態的儀表板&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_23-53-18.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_23-53-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;grafana&quot;&gt;Grafana&lt;/h2&gt;

&lt;p&gt;Grafana 主要的 Web UI 介面，透過 Influxdb 讀取紀錄資料畫出各種視覺化圖表顯示在 Web 上。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;grafana -p 3000:3000 grafana/grafana
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;啟動後使用 chrome 連到該主機的 3000 port，即可看到 Grafana 畫面
http://ip:3000/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_22-21-25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次登入預設帳號密碼是 admin / admin，登入後會要求設定新密碼，記得存起來&lt;/p&gt;

&lt;p&gt;Note: 這個設定缺少 Grafana 的資料保存，當容器刪除後，相關資料將會遺失&lt;/p&gt;

&lt;h2 id=&quot;influxdb&quot;&gt;Influxdb&lt;/h2&gt;

&lt;p&gt;Influxdb 主要是時間序的資料庫，用來存放 Telegraf 收集的紀錄，提供給 Grafana 查詢。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;influxdb -p 8086:8086 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -e &lt;span class=&quot;nv&quot;&gt;INFLUXDB_DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;defaultdb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -e &lt;span class=&quot;nv&quot;&gt;INFLUXDB_ADMIN_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;admin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -e &lt;span class=&quot;nv&quot;&gt;INFLUXDB_ADMIN_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;adminpass &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -e &lt;span class=&quot;nv&quot;&gt;INFLUXDB_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -e &lt;span class=&quot;nv&quot;&gt;INFLUXDB_USER_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;userpass &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      -v /data/influxdb:/var/lib/influxdb &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      influxdb:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;telegraf&quot;&gt;Telegraf&lt;/h2&gt;

&lt;p&gt;Telegraf 用來收集相關資料，傳送給 Influxdb。&lt;/p&gt;

&lt;p&gt;如果是第一次設定，可以從 docker image 取得預設設定檔&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm telegraf telegraf config &amp;gt; telegraf.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著修改設定檔，其中 influxdb 的 urls 跟 hostname 要修改，hostname 預設會取 VM 名稱，但是因為跑在容器內，會取到容器的名稱，識別性太低，所以記得設定。&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;]
  ...
  &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;sgp1&quot;&lt;/span&gt;

[[&lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;influxdb&lt;/span&gt;]]
  &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; = [&lt;span class=&quot;s2&quot;&gt;&quot;http://127.0.0.1:8086&quot;&lt;/span&gt;]
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了預設的 cpu, mem 之後，也把一些預設關閉的功能開啟&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;interrupts&lt;/span&gt;]]
  &lt;span class=&quot;c&quot;&gt;# no configuration
&lt;/span&gt;  
[[&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;linux_sysctl_fs&lt;/span&gt;]]
  &lt;span class=&quot;c&quot;&gt;# no configuration
&lt;/span&gt;
[[&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;]]
  &lt;span class=&quot;c&quot;&gt;# collect data only about specific interfaces
&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# interfaces = [&quot;eth0&quot;]
&lt;/span&gt;
[[&lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;netstat&lt;/span&gt;]]
  &lt;span class=&quot;c&quot;&gt;# no configuration
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著使用 docker 啟動&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;telegraf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --network host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /:/hostfs:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /etc:/hostfs/etc:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /proc:/hostfs/proc:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /sys:/hostfs/sys:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /var:/hostfs/var:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-v /run:/hostfs/run:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_ETC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs/etc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_PROC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs/proc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_SYS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs/sys &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs/var &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_RUN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs/run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	-e &lt;span class=&quot;nv&quot;&gt;HOST_MOUNT_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/hostfs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  telegraf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: 為了收集網路資料，使用 host mode 網路模式，需要注意相關安全性問題&lt;/p&gt;

&lt;h2 id=&quot;新增-datasource&quot;&gt;新增 DataSource&lt;/h2&gt;

&lt;p&gt;DataSource 選擇 InfluxDB&lt;/p&gt;

&lt;p&gt;HTTP 的 URL 記得設定能從容器中連的到的 InfluxDB IP&lt;/p&gt;

&lt;p&gt;InfluxDB Details 輸入 telegraf&lt;/p&gt;

&lt;p&gt;最後按下 Save &amp;amp; Test&lt;/p&gt;

&lt;p&gt;出現綠底白字表示設定成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_23-44-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新增-dashboard&quot;&gt;新增 Dashboard&lt;/h2&gt;

&lt;p&gt;在 Dashboard 管理頁面，選擇右上角的 Import&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_23-46-18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後使用 grafana.com 上建好的設定，輸入 928&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2020-05-23/2020-05-23_23-47-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這麼一來就有一些基本的資料可以查詢啦&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/r/grafana/grafana&quot;&gt;grafana/grafana - Docker Hub&lt;/a&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/49066607/launching-a-influxdb-container-in-docker-with-a-default-database-name&quot;&gt;Launching a InfluxDB container in docker with a default database name - Stack Overflow&lt;/a&gt;
&lt;a href=&quot;https://hub.docker.com/_/telegraf&quot;&gt;telegraf - Docker Hub&lt;/a&gt;
&lt;a href=&quot;https://github.com/influxdata/telegraf/blob/master/docs/FAQ.md#q-how-can-i-monitor-the-docker-engine-host-from-within-a-container&quot;&gt;telegraf/FAQ.md at master · influxdata/telegraf · GitHub&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Grafana" /><category term="Influxdb" /><category term="Telegraf" /><category term="monitor" /><summary type="html">系統運作一段時間之後，想要知道最近狀況是否正常，卻沒有紀錄可以查詢跟比較。為了解決這個情況，需要一套監控系統，這裡使用 Grafana Influxdb Telegraf 解決方案。 成果 擁有一個可以查詢系統狀態的儀表板 Grafana Grafana 主要的 Web UI 介面，透過 Influxdb 讀取紀錄資料畫出各種視覺化圖表顯示在 Web 上。 docker run -d --name=grafana -p 3000:3000 grafana/grafana 啟動後使用 chrome 連到該主機的 3000 port，即可看到 Grafana 畫面 http://ip:3000/ 第一次登入預設帳號密碼是 admin / admin，登入後會要求設定新密碼，記得存起來 Note: 這個設定缺少 Grafana 的資料保存，當容器刪除後，相關資料將會遺失 Influxdb Influxdb 主要是時間序的資料庫，用來存放 Telegraf 收集的紀錄，提供給 Grafana 查詢。 docker run -d --name=influxdb -p 8086:8086 \ -e INFLUXDB_DB=defaultdb \ -e INFLUXDB_ADMIN_USER=admin \ -e INFLUXDB_ADMIN_PASSWORD=adminpass \ -e INFLUXDB_USER=user \ -e INFLUXDB_USER_PASSWORD=userpass \ -v /data/influxdb:/var/lib/influxdb \ influxdb:latest Telegraf Telegraf 用來收集相關資料，傳送給 Influxdb。 如果是第一次設定，可以從 docker image 取得預設設定檔 docker run --rm telegraf telegraf config &amp;gt; telegraf.conf 接著修改設定檔，其中 influxdb 的 urls 跟 hostname 要修改，hostname 預設會取 VM 名稱，但是因為跑在容器內，會取到容器的名稱，識別性太低，所以記得設定。 [agent] ... hostname = &quot;sgp1&quot; [[outputs.influxdb]] urls = [&quot;http://127.0.0.1:8086&quot;] ... 除了預設的 cpu, mem 之後，也把一些預設關閉的功能開啟 [[inputs.interrupts]] # no configuration [[inputs.linux_sysctl_fs]] # no configuration [[inputs.net]] # collect data only about specific interfaces # interfaces = [&quot;eth0&quot;] [[inputs.netstat]] # no configuration 接著使用 docker 啟動 docker run -d --name=telegraf \ --network host \ -v /:/hostfs:ro \ -v /etc:/hostfs/etc:ro \ -v /proc:/hostfs/proc:ro \ -v /sys:/hostfs/sys:ro \ -v /var:/hostfs/var:ro \ -v /run:/hostfs/run:ro \ -e HOST_ETC=/hostfs/etc \ -e HOST_PROC=/hostfs/proc \ -e HOST_SYS=/hostfs/sys \ -e HOST_VAR=/hostfs/var \ -e HOST_RUN=/hostfs/run \ -e HOST_MOUNT_PREFIX=/hostfs \ -v /data/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro \ telegraf Note: 為了收集網路資料，使用 host mode 網路模式，需要注意相關安全性問題 新增 DataSource DataSource 選擇 InfluxDB HTTP 的 URL 記得設定能從容器中連的到的 InfluxDB IP InfluxDB Details 輸入 telegraf 最後按下 Save &amp;amp; Test 出現綠底白字表示設定成功 新增 Dashboard 在 Dashboard 管理頁面，選擇右上角的 Import 然後使用 grafana.com 上建好的設定，輸入 928 這麼一來就有一些基本的資料可以查詢啦 Ref grafana/grafana - Docker Hub Launching a InfluxDB container in docker with a default database name - Stack Overflow telegraf - Docker Hub telegraf/FAQ.md at master · influxdata/telegraf · GitHub</summary></entry><entry><title type="html">使用 Nginx 建立 Reverse Proxy Server</title><link href="https://twblog.hongjianching.com/2020/05/17/nginx-reverse-proxy-server/" rel="alternate" type="text/html" title="使用 Nginx 建立 Reverse Proxy Server" /><published>2020-05-17T00:00:00+08:00</published><updated>2020-05-17T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2020/05/17/nginx-reverse-proxy-server</id><content type="html" xml:base="https://twblog.hongjianching.com/2020/05/17/nginx-reverse-proxy-server/">&lt;p&gt;使用 Nginx 建立一個反向代理伺服器&lt;/p&gt;

&lt;p&gt;以前使用 Web Server，同一個 VM 需要多個網域對應的時候，在 Apache 會使用 VirtualHost 設定，而 Nginx 實現的功能叫 Server Blocks，詳細可以參考&lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/&quot;&gt;官網範例&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用-server-blocks-的問題&quot;&gt;使用 Server Blocks 的問題&lt;/h2&gt;

&lt;p&gt;其實單純使用 Nginx 的 Server Blocks 是沒有問題的，但是在使用 Docker 時，就會出現多個網站使用同一個容器的情況，失去容器化的優勢。&lt;/p&gt;

&lt;h2 id=&quot;reverse-proxy-server&quot;&gt;Reverse Proxy Server&lt;/h2&gt;

&lt;p&gt;解決的方法很簡單，就是建立反向代理伺服器 (Reverse Proxy Server)&lt;/p&gt;

&lt;p&gt;原本的 WebSite A 獨立運作在一個容器 A&lt;/p&gt;

&lt;p&gt;另外的 WebSite B 獨立運作在一個容器 B&lt;/p&gt;

&lt;p&gt;最後建立一個 Reverse Proxy Server 運作在 容器 C，負責將各自的流量導到容器 A 跟 B。&lt;/p&gt;

&lt;h2 id=&quot;實作&quot;&gt;實作&lt;/h2&gt;

&lt;p&gt;事實上透過 Nginx 建立 Reverse Proxy 非常簡單，首先透過 nginx docker 複製一份預設的設定檔&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name tmp-nginx-container -d nginx
docker cp tmp-nginx-container:/etc/nginx/nginx.conf nginx.conf
docker rm -f tmp-nginx-container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改 config，在 http 中加上&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;80;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;domain1.com;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_pass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;http://127.0.0.1:8080;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;80;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;domain2.com;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy_pass&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;http://127.0.0.1:8081;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改 config 之後，使用自定義的 config 啟動 nginx&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --name proxy-server -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro -d -p 80:80 nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這麼一來，當使用者透過 domain1.com 及 domain2.com 存取網站時，就會分別導到不同的地方嘍。
即可以在同一個 VM 中使用同一個 port 處理不同的網站，又不會失去容器化的功能。&lt;/p&gt;

&lt;h3 id=&quot;ref&quot;&gt;Ref&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/_/nginx&quot;&gt;nginx - Docker Hub&lt;/a&gt;
&lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/full/&quot;&gt;Full Example Configuration | NGINX&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="w3HexSchool" /><category term="Nginx" /><summary type="html">使用 Nginx 建立一個反向代理伺服器</summary></entry></feed>