<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://twblog.hongjianching.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://twblog.hongjianching.com/" rel="alternate" type="text/html" /><updated>2018-10-09T21:57:08+08:00</updated><id>https://twblog.hongjianching.com/</id><title type="html">Jian-Ching 記事本</title><subtitle>An notebook website.</subtitle><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><entry><title type="html">在 Ubuntu 使用 Docker 安裝 Jenkins</title><link href="https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker-on-ubuntu/" rel="alternate" type="text/html" title=" 在 Ubuntu 使用 Docker 安裝 Jenkins" /><published>2018-10-09T00:00:00+08:00</published><updated>2018-10-09T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker-on-ubuntu</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/09/install-jenkins-with-docker-on-ubuntu/">&lt;p&gt;Jenkins 是 CI 老牌工具，透過新的 Docker 技術，快速建立自己的 CI 環境。&lt;/p&gt;

&lt;p&gt;如果還沒有 Docker 執行環境，可以參考 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/02/install-docker/&quot;&gt;安裝 Docker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一步先在 host 建立存放 Jenkins 的目錄，放在 /data/jenkins&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir -p /data/jenkins
sudo chown -R &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$GROUP&lt;/span&gt; /data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;透過 docker 啟動 jenkins&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
    --name jenkins \
    -d --restart always \
    -p 8080:8080 -p 50000:50000 \
    -v /data/jenkins:/var/jenkins_home \
    jenkins/jenkins:lts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後可以在 http://localhost:8080 看到 jenkins 準備上工了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker-on-ubuntu/2018-10-09_21-19-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等一段時候之後，jenkins 就會要求輸入預設管理員密碼，畫面上提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;，但是我們有將容器的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/jenkins_home&lt;/code&gt; 對映到 host 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/jenkins&lt;/code&gt;，所以我們可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/data/jenkins/secrets/initialAdminPassword&lt;/code&gt; 找到預設密碼&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /data/jenkins/secrets/initialAdminPassword
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下確認後，選擇 install suggested plugins，plugins 可以之後再依需要安裝&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker-on-ubuntu/2018-10-09_21-31-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待 plugin 安裝完成後，建立第一個管理員帳號，接著輸入 Jenkins URL，如果只是測試用可以保持 losthost 沒關係，但是如果要正式使用，記得改為真實 IP 喔。最後可以看到 &lt;strong&gt;Jenkins is ready&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker-on-ubuntu/2018-10-09_21-51-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按下 &lt;em&gt;Start using Jenkins&lt;/em&gt; 之後就會看到 Jenkins 主頁面了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-09-install-jenkins-with-docker-on-ubuntu/2018-10-09_21-53-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 建置完成嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><category term="Jenkins" /><category term="Ubuntu" /><summary type="html">Jenkins 是 CI 老牌工具，透過新的 Docker 技術，快速建立自己的 CI 環境。</summary></entry><entry><title type="html">使用 GitHub 在 DockerHub 自動建置 Docker Image</title><link href="https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/" rel="alternate" type="text/html" title="使用 GitHub 在 DockerHub 自動建置 Docker Image" /><published>2018-10-08T00:00:00+08:00</published><updated>2018-10-08T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/">&lt;p&gt;今天要談論如何使用 GitHub 和 DockerHub 建立自動建置 Image，功能強大，但是反而非常的簡單喔！&lt;/p&gt;

&lt;p&gt;前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/&quot;&gt;將 Image 發佈到 Docker Hub&lt;/a&gt; 已經學會手動將做好的 Image 放到 DockerHub 上，但是製作的動作很多，而且如果是想給別人用會有疑慮，因為不知道你的映像檔做了哪些修改，或者會不會加什麼料進去呢？&lt;/p&gt;

&lt;p&gt;為了 &lt;del&gt;世界和平&lt;/del&gt; 讓其它人可以安心下載你製作的 image，也為了節省自己的時間，我們就利用 GitHub 和 DockerHub 來自動建置映像檔吧。&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;GitHub&lt;/h1&gt;
&lt;p&gt;首先要有 GitHub 帳號，接著建立一個 git 倉庫，這邊命名為 docker-ithelp-webserver-auto，命名沒有規範，叫什麼都可以，個人為了跟一般程式碼專案區隔，所以會加上 docker 前缀字，或者可以考慮單獨申請一個獨立帳號來集中 docker 專案。&lt;/p&gt;

&lt;p&gt;重要的一點，為了直接在 GitHub 網頁操作，請將 &lt;em&gt;Initialize this repository with a README&lt;/em&gt; 打勾喔！(想直接用 git 操作的人就可以無視沒關係)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-30-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後就有一個 Git 倉庫了，接著按下右上角的 &lt;em&gt;Create new file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-32-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;輸入檔名 Dockerfile，和前一篇 Dockerfile 的內容，接著按下 &lt;em&gt;Commit new file&lt;/em&gt; 就完成 Git 倉庫的準備了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-34-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dockerhub&quot;&gt;DockerHub&lt;/h1&gt;
&lt;p&gt;接著到 DockerHub，選擇右上角的 &lt;em&gt;Create&lt;/em&gt; 及 &lt;em&gt;Create Automated Build&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-37-44.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一次因為還沒有連結 GitHub，所以會需要授權，按下 &lt;em&gt;Link Accounts&lt;/em&gt; 及 &lt;em&gt;Link Github&lt;/em&gt; 及 &lt;em&gt;Select&lt;/em&gt;，完成授權後，重覆 &lt;em&gt;Create Automated Build&lt;/em&gt; 的動作會看到 &lt;em&gt;Create Auto-build Github&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-41-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後就會出現你 Github 所有的專案，選擇剛剛建立的 docker-ithelp-webserver-auto，接著給 Dockerhub 的倉庫命名，個人習慣會把 docker 前缀字拿掉，這個例子為 ithelp-webserver-auto，輸入 Description 後按下 &lt;em&gt;Cretae&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-43-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這麼一來 DockerHub 倉庫也建立完成了，從首頁可以看完最大的不同是會顯示這個 image 的來源，還有選單多了 &lt;em&gt;Dockerfile&lt;/em&gt;、&lt;em&gt;Build Details&lt;/em&gt; 和 &lt;em&gt;Build Settings&lt;/em&gt;，這邊有兩個網頁可以比較一下 &lt;a href=&quot;https://hub.docker.com/r/allyusd/ithelp-webserver/&quot;&gt;allyusd/ithelp-webserver&lt;/a&gt; 和 &lt;a href=&quot;https://hub.docker.com/r/allyusd/ithelp-webserver-auto/&quot;&gt;allyusd/ithelp-webserver-auto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-46-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-48-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;選擇 &lt;em&gt;Build Settings&lt;/em&gt; 按下 &lt;em&gt;Trigger&lt;/em&gt; 之後 Dockerhub 就會依照 Github 上面的 Dockerfile 開始建置嘍！建置的狀態或 Logs 可以在 &lt;em&gt;Build Details&lt;/em&gt; 查詢。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-10-08-create-dockerhub-automated-build/2018-10-08_21-55-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而且之後只要 Github 有 push 的動作，就會自動觸發建置喔，這麼一來我們只要專心寫好 Dockerfile，就可以等著使用自動建置好的 image 嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">今天要談論如何使用 GitHub 和 DockerHub 建立自動建置 Image，功能強大，但是反而非常的簡單喔！</summary></entry><entry><title type="html">將 Image 發佈到 Docker Hub</title><link href="https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/" rel="alternate" type="text/html" title="將 Image 發佈到 Docker Hub" /><published>2018-10-07T00:00:00+08:00</published><updated>2018-10-07T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/07/push-image-to-dockerhub/">&lt;p&gt;這篇會說明如何將 Image 發佈到 Docker Hub。&lt;/p&gt;

&lt;p&gt;在前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/&quot;&gt;使用 Dockerfile 建立自己的 Docker Image&lt;/a&gt; 已經知道如何建立自己的 image，但是建立的 image 只能本機使用，除非手動復製，否則不能在其它電腦使用。&lt;/p&gt;

&lt;p&gt;在這之前有個疑問，那之前我們使用的 image，像是 hello-world、ubuntu:18.04 是從哪裡來的呢？&lt;/p&gt;

&lt;h1 id=&quot;docker-hub&quot;&gt;Docker Hub&lt;/h1&gt;
&lt;p&gt;來源其實就是 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;，目前是 Docker 預設的 image 來源，像是 &lt;a href=&quot;https://hub.docker.com/_/hello-world/&quot;&gt;hello-world&lt;/a&gt;、&lt;a href=&quot;https://hub.docker.com/_/ubuntu/&quot;&gt;ubuntu&lt;/a&gt;。從網站上可以找看看自己有興趣的 image，或者上傳自己的 image。&lt;/p&gt;

&lt;p&gt;我們建立好 Docker Hub 帳號之後，就可以建立 image repository，按右上角的 Create，然後選擇 Create Repository&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-28-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著在 name 的欄位輸入想要的 image 名稱，這個範例中命名為 ithelp-webserver，在下面的 description 可以輸入想要說明的資訊。Visibility 決定這個 image 是不是公開的，公開的話每個人都可以使用，私有的話只有自己能用，但是免費帳號只能有個一個私有倉庫，想要多一些的話就要付費。選擇後按下 Create。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-32-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成後就會看到這個畫面，這樣一個映像檔倉庫就建立完成了，左上方就是這個 image 的名稱，因為 docker hub 是全球的人共用的，所以個人建立的 image 都會放在該帳號下，這個例子中就是 allyusd/ithelp-webserver。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_21-37-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後回到 console，利用 build 指令重新命名 allyusd/ithelp-webserver 映像檔，因為跟前一個完全一樣，所以動作很快完成。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build . -t allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在將做好的 image 發佈到 docker hub 之前，需要先證明自己是這個倉庫的擁有者，需要透過 login 指令登入，接著輸入帳號、密碼&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完成登入後，就可以使用 push 指令發佈 image 到 docker hub&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-11-55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成後可以回到 dockerhub 專案的位置，選擇 Tags 就可以看到剛剛上傳的資訊&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-13-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最後我們可以先用 rmi 指令刪除本地的 image，然後再用新的指令啟動 webserver&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rmi allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -it &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -p 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -v ~/www:/var/www/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    allyusd/ithelp-webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-07-push-image-to-dockerhub/2018-10-07_22-18-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這麼一來，我們就可以在任何電腦啟動我們自己做的映像檔&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">這篇會說明如何將 Image 發佈到 Docker Hub。</summary></entry><entry><title type="html">使用 Dockerfile 建立自己的 Docker Image</title><link href="https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/" rel="alternate" type="text/html" title="使用 Dockerfile 建立自己的 Docker Image" /><published>2018-10-06T00:00:00+08:00</published><updated>2018-10-06T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/06/using-dockerfile-build-docker-image/">&lt;p&gt;這篇寫簡單 Dockerfile 來建立自己的 Docker Image&lt;/p&gt;

&lt;p&gt;在前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/&quot;&gt;使用 Docker - Port 及 Volume&lt;/a&gt;中，如果有照著每個動作來做的話，一定會發現一件事。&lt;/p&gt;

&lt;p&gt;那就是，安裝 nginx 的動作重覆很多次而且很久(因為每次都要重新下載)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install nginx -y
service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就是上面兩行指令，一再的重覆&lt;/p&gt;

&lt;h1 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/02/install-docker/&quot;&gt;安裝 Docker&lt;/a&gt; 時有提過，使用 Docker 其中一個優勢就是繼承，這個特性在 Dockerfile 可以體現出來。&lt;/p&gt;

&lt;p&gt;Dockerfile 最基本的指令是 FROM，也就是這個 Dockerfile 是繼承哪個 image 的。有一行就可以視為合格的 Dockerfile，像是我們用 ubuntu 當基底。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;當然，這樣產生的 image 會跟 ubuntu:18.04 一模一樣，所以我們要加上我們想要的，安裝 nginx 動作。透過 RUN 指令，可以幫我們做到這件事&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt update &amp;amp;&amp;amp; apt install nginx -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後，別忘了啟動 nginx，畢竟能自動完成的事情，又何必自己來呢？透過 CMD 指令，告訴 Docker 啟動容器後應該做什麼事情。&lt;/p&gt;

&lt;p&gt;這邊特別說明一下，如果 CMD 後面指定的是不會結束的程式，那就沒有問題，但是之前是透過 service 命令啟動的，因為這個命令一執行就結束了，接著容器就結束了，為了避免這種情況，後面加上了 /bin/bash 維持運作。(當然也可以直接執行 nginx 就不用這個動作)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt update &amp;amp;&amp;amp; apt install nginx -y

CMD service nginx start &amp;amp;&amp;amp; /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;build---建置映像檔&quot;&gt;build - 建置映像檔&lt;/h1&gt;

&lt;p&gt;寫完 Dockerfile，就可以建置 image 了，透過 build 指令，後面接 Dockerfile 所在的路徑，最好加上 -t 參數給個名字&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build . -t webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;等他建置完，我們可以透過 images 指令來查詢本機目前有哪些 image&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-06-using-dockerfile-build-docker-image/2018-10-06_22-09-13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從圖片中可以看到，除了我們之前用到的 hello-wrold 和 ubuntu:18.04 之外，還多了一個 webserver 的 image，這就是剛剛建立好的映像檔。這麼一來我們把之前的指令改用 webserver 來啟動吧。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -it &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -p 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -v ~/www:/var/www/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    webserver
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這次不再需要進入容器，也不用啟動 nginx，直接可以在 http://localhost 出現網頁嘍！&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">這篇寫簡單 Dockerfile 來建立自己的 Docker Image</summary></entry><entry><title type="html">使用 Docker - Port 及 Volume</title><link href="https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/" rel="alternate" type="text/html" title="使用 Docker - Port 及 Volume" /><published>2018-10-05T00:00:00+08:00</published><updated>2018-10-05T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/05/run-docker-port-volume/">&lt;p&gt;這篇講一下設定 Port 及 Volume，也是網路及硬碟最簡單的用法&lt;/p&gt;

&lt;p&gt;上一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/04/run-docker-service/&quot;&gt;使用 Docker - 背景服務&lt;/a&gt; 已經提到如何啟動背景服務執行的方法，這次直接進到容器內，安裝並啟動 nginx。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install nginx -y
service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然後在 chrome 上面輸入 localhost，就會出現
&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-33-14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是因為容器是個獨立的環境，預設是沒有任何 Port 對外開放的。&lt;/p&gt;

&lt;h1 id=&quot;-p-port-對映&quot;&gt;-p Port 對映&lt;/h1&gt;

&lt;p&gt;使用 -p 參數，左邊是 host 的 port 號，右邊是 container 的 port 號。在這個例子中都是 80 port，完整的指令如下(這串指串越來越長了呢…)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it -p 80:80 ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;執行後可以用 ps 看一下，會發現在 PORTS 欄位多了剛剛加上的設定喔
&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-27-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著再次安裝並啟動 nginx，並且在 chrome 按下 F5 更新，這次成功出現網頁了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_22-32-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;-v-volume-對映&quot;&gt;-v Volume 對映&lt;/h1&gt;
&lt;p&gt;接著，我們想要修改網頁，但是容器內沒有編輯器而且不想安裝，能不能直接在 Host 上面修改，然後直接反應在容器呢？&lt;/p&gt;

&lt;p&gt;接著利用 Volume 對映，就好像前面講到可以指定 Port 一樣，只是這次換成了硬碟路徑對映，使用 -v 參數，左邊是 Host 路徑，右邊是 container 路徑。在這個例子中，設定在家目錄的 www，對應到 container 內 nginx 的預設路徑 /usr/share/nginx/html，完整的指令如下&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it -p 80:80 -v ~/www:/var/www/html ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;已經變得超級長了，這時候在 script 或 Dockerfile 中為了方便閱讀，可能會寫成這樣，意思是一樣的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run \
    --restart=always \
    -d \
    -it \
    -p 80:80 \
    -v ~/www:/var/www/html \
    ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安裝並啟動 nginx，退出容器並且修改 host 的 html 檔案，在 chrome 按下 F5 更新後可以看到網頁已經是修改後的樣子了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-05-run-docker-port-volume/2018-10-05_23-35-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">這篇講一下設定 Port 及 Volume，也是網路及硬碟最簡單的用法</summary></entry><entry><title type="html">使用 Docker - 背景服務</title><link href="https://twblog.hongjianching.com/2018/10/04/run-docker-service/" rel="alternate" type="text/html" title="使用 Docker - 背景服務" /><published>2018-10-04T00:00:00+08:00</published><updated>2018-10-04T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/04/run-docker-service</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/04/run-docker-service/">&lt;p&gt;接著&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/03/run-docker-basic/&quot;&gt;使用 Docker - 基本操作&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;run---執行容器&quot;&gt;run - 執行容器&lt;/h1&gt;

&lt;p&gt;之前提到使用 run 及 -it 參數可以進入容器內操作，這時候如果輸入 exit 離開就會結束容器執行。但如果不想結束容器運作，單純想退出 shell 怎麼辦？&lt;/p&gt;

&lt;p&gt;直接關閉 shell 或是按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + p&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + q&lt;/code&gt; 就可以保持容器運作&lt;/p&gt;

&lt;p&gt;那能不能一開始就想讓容器保持運作，像一個背景服務一樣單獨執行而不進入 shell 介面呢？&lt;/p&gt;

&lt;p&gt;可以，使用 -d，代表 detach&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-43-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;attach&quot;&gt;attach&lt;/h1&gt;
&lt;p&gt;好的，雖然我剛剛是這麼要求的，但是我反悔想進入容器內操作，能不能不要啟動新的容器直接進入目前執行中的容器呢？&lt;/p&gt;

&lt;p&gt;可以，剛剛是 detach，反過來是 attach，一樣可以透過 id 或 name 指定要進入的容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker attach running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-47-55.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;記得要離開的時候要透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + p&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + q&lt;/code&gt; 進行 detach，否則容器會終止運行喔。&lt;/p&gt;

&lt;h1 id=&quot;stop-start---停止啟動容器&quot;&gt;stop, start - 停止、啟動容器&lt;/h1&gt;
&lt;p&gt;既然我們的目標是一個背景服務，萬一不小心直接輸入 exit 關掉的話就不好了，所以我們可以把之前為了方便測試的 –rm 參數拿掉，這樣容器在終止時還會保留下來。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這裡同時介紹一下，運行中的容器想要停止的話可以透過 stop 指令，並且透過 start 重新啟動&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_21-58-47.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;restart---重新啟動&quot;&gt;–restart - 重新啟動&lt;/h1&gt;
&lt;p&gt;要作為背景服務，別忘了自動重新啟動的功能，透過 –restart 加上 always 讓 docker 自動幫容器重新啟動&lt;/p&gt;

&lt;p&gt;重新啟動包含下列情境&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Host 開機時自動啟動容器 (是的，預設開機時是不會啟動的喔)&lt;/li&gt;
  &lt;li&gt;在容器中不小心輸入 exit 退出運行時自動重啟&lt;/li&gt;
  &lt;li&gt;容器運行中的程式當掉了，自動重啟&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這邊要注意，自動重啟 &lt;strong&gt;不包含&lt;/strong&gt; 上面提到的 stop 指令喔，透過 stop 指令還是會停止面前容器運作，不會自動重啟的，不過也因為這樣才能進行維謢作業&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -d -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-04-run-docker-service/2018-10-04_22-09-23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">接著使用 Docker - 基本操作</summary></entry><entry><title type="html">使用 Docker - 基本操作</title><link href="https://twblog.hongjianching.com/2018/10/03/run-docker-basic/" rel="alternate" type="text/html" title="使用 Docker - 基本操作" /><published>2018-10-03T00:00:00+08:00</published><updated>2018-10-03T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/03/run-docker-basic</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/03/run-docker-basic/">&lt;p&gt;上一篇講&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/02/install-docker/&quot;&gt;安裝 Docker&lt;/a&gt;，&lt;/p&gt;

&lt;p&gt;這篇進入正題，開始使用 Docker&lt;/p&gt;

&lt;h1 id=&quot;ps---顯示容器清單&quot;&gt;ps - 顯示容器清單&lt;/h1&gt;
&lt;p&gt;首先是 ps，列出目前執行中的容器。雖然沒有明確說明，猜想是 linux 的 ps 指令，也就是 process status&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果想要看到全部，包含已停止的，加上 -a 參數，代表 all 全部&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker ps -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果有照著之前執行過 hello-world，就會發現他出現在清單上，而且是 Exit 狀態。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-03-run-docker/2018-10-03_20-50-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rm---刪除容器&quot;&gt;rm - 刪除容器&lt;/h1&gt;
&lt;p&gt;使用 rm 指令，代表 remove 移除，可以使用 id 或者 name 來刪除&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm trusting_wozniak
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;執行成功會顯示被刪除的名字，再用 ps -a 查詢會發現之前的容器已經消失嘍&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-03-run-docker/2018-10-03_20-58-52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;預設 rm 指令只能刪除停止的容器，如果要強制刪除執行中的容器，就要使用 -f 參數，代表 force 強制&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker rm -f running_container
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;run---執行容器&quot;&gt;run - 執行容器&lt;/h1&gt;

&lt;h2 id=&quot;hello-wrold&quot;&gt;hello-wrold&lt;/h2&gt;
&lt;p&gt;使用 run 執行容器，上一篇已經偷跑執行 hello world&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果確認是跑完就不再使用的，可以在執行時加上 –rm 參數，當容器終止時會自動刪除，很方便&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-03-run-docker/2018-10-03_21-07-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ubuntu&quot;&gt;ubuntu&lt;/h2&gt;
&lt;p&gt;只能跑 hello world 絕對不夠，接著來執行 ubuntu 吧。沒錯，在 ubuntu 上面執行 ubuntu 容器，這次 ubuntu 18.04 版本的 image 只有 &lt;a href=&quot;https://microbadger.com/images/ubuntu:18.04&quot;&gt;30.3 MB&lt;/a&gt;，比前一版 16.04 還少了 11 MB&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;執行後，docker 開始下載 ubuntu 18.04 的 image，然後，沒有然後，什麼事都沒發生。這是一開始容易卡關的地方，實際上，容器執行後因為沒事做就終止了，然後被自動刪除 (–rm)。&lt;/p&gt;

&lt;p&gt;如果想要跟容器互動，可以加上 -it&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -it ubuntu:18.04
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-03-run-docker/2018-10-03_21-25-43.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這次因為 image 已經在本機了，所以馬上就進入容器內，可以開始大玩特玩喔。雖然 ubuntu docker image 為了最小化，所以很多套件都沒有預裝，但是有 apt-get 可以使用，不用太擔心，想要什麼自己裝就好了。&lt;/p&gt;

&lt;p&gt;如果玩膩了，只要輸入 exit 就會退出容器，同時容器就會終止，然後自動刪除嘍。&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">上一篇講安裝 Docker，</summary></entry><entry><title type="html">安裝 Docker</title><link href="https://twblog.hongjianching.com/2018/10/02/install-docker/" rel="alternate" type="text/html" title="安裝 Docker" /><published>2018-10-02T00:00:00+08:00</published><updated>2018-10-02T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/02/install-docker</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/02/install-docker/">&lt;h1 id=&quot;docker-的優勢&quot;&gt;Docker 的優勢&lt;/h1&gt;
&lt;p&gt;Docker 的介紹就跳過了，&lt;del&gt;因為我也不懂&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;不只常聽到的 DevOps 還是 CI / CD 會用到 Docker，平常拿來玩一些有的沒的東西時也很好用。不像 VM 還要作快照跟還原，用 docker 可以做完實驗後直接登出就消失，不留痕跡。&lt;/p&gt;

&lt;p&gt;簡單來說，使用他的優點就是&lt;del&gt;趕流行&lt;/del&gt;、&lt;strong&gt;快&lt;/strong&gt;、&lt;strong&gt;封裝&lt;/strong&gt;、&lt;strong&gt;繼承&lt;/strong&gt;、&lt;del&gt;多型&lt;/del&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;啟動非常快速，不算下載 Image 的時間，啟動一個 container 只是幾秒鐘的事情。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;封裝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;將開發或執行環境封裝在 Image 裡面，不用擔心沒安裝或少設定什麼。如果是實驗用的環境，就不用擔心會汙染 Host，可以隨心所欲，想安裝什麼就安裝什麼，想改什麼設定就改什麼設定。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;繼承&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;別人建好的 Image 可以直接繼承使用，或者自己建立 Base Image，然後一直疊加上去。&lt;/p&gt;

&lt;h1 id=&quot;安裝-docker&quot;&gt;安裝 Docker&lt;/h1&gt;
&lt;p&gt;環境我選擇最新的 Ubuntu LTS 18.04 來當 Host，如果手邊沒有多的電腦安裝的話可以用 VirtualBox 裝起來跑。&lt;/p&gt;

&lt;p&gt;透過懶人指令安裝 Docker&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh -c &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -fsSL https://get.docker.com&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
sudo usermod -aG docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/allyusd/script/blob/master/docker.sh&quot;&gt;script/docker.sh at master · allyusd/script&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;第一行用 docker 官方提供的 script 快速安裝&lt;/p&gt;

&lt;p&gt;第二行則是將現有的使用者加入 docker 群組，否則會沒有權限操作 docker 指令&lt;/p&gt;

&lt;p&gt;ref: &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script&quot;&gt;Get Docker CE for Ubuntu - Docker Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記得重新登入取得新的權限，然後接著執行一下 hello world&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看到訊息就代表成功執行 docker 嘍
&lt;img src=&quot;/assets/images/2018-10-02-install-docker/2018-10-02_22-06-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Docker" /><summary type="html">Docker 的優勢 Docker 的介紹就跳過了，因為我也不懂</summary></entry><entry><title type="html">2019 iT 邦幫忙鐵人賽 目錄及前言</title><link href="https://twblog.hongjianching.com/2018/10/01/2019-ithelp-ironman-30-days-challenge-index/" rel="alternate" type="text/html" title="2019 iT 邦幫忙鐵人賽 目錄及前言" /><published>2018-10-01T00:00:00+08:00</published><updated>2018-10-01T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/01/2019-ithelp-ironman-30-days-challenge-index</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/01/2019-ithelp-ironman-30-days-challenge-index/">&lt;p&gt;第一篇，照慣例(誰說的？)用來當目錄和前言，尤其是這次沒有明確主題的系列，更是需要目錄，因為連我自己都不知道會有哪些文章。(逃~)&lt;/p&gt;

&lt;h1 id=&quot;參賽&quot;&gt;參賽&lt;/h1&gt;

&lt;p&gt;大概 1、2 年前就知道 iT 邦幫忙鐵人賽，雖然感到興趣，但一直沒有行動，主要原因是懶(真好意思說)，次要原因就是知道的時候已經開賽了。這次被室友提醒這個活動，決定挑戰一下。&lt;/p&gt;

&lt;h2 id=&quot;參賽主要目的&quot;&gt;參賽主要目的&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;為明年鐵人賽準備&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;本來打算準備一年，明年再參加的，但是想想，沒參加過怎麼知道該準備什麼？該注意什麼？該改進什麼呢？所以就報名參賽了。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;清除堆積的筆記&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://twblog.hongjianching.com/&quot;&gt;個人部落格 - Jian-Ching 記事本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;雖然自己的部落格從去年 4 月就建立了，但是至今 1 年半過去，文章數還是寥寥無幾，其中還有從舊站搬過來的，令人汗顏。&lt;/p&gt;

&lt;p&gt;相反的，hackmd 中好幾篇筆記堆積已久，利用這個機會強迫自己清理一下。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主題&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;這次的系列文章雖然都跟軟體開發有關，但沒有特定的主題。從筆記中找到的 tag 有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DevOps、CI、CD
    &lt;ul&gt;
      &lt;li&gt;GitLab&lt;/li&gt;
      &lt;li&gt;Jenkins&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Shell Script&lt;/li&gt;
  &lt;li&gt;Agile&lt;/li&gt;
  &lt;li&gt;Ubuntu&lt;/li&gt;
  &lt;li&gt;Qt&lt;/li&gt;
  &lt;li&gt;C#&lt;/li&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;Database&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Socket&lt;/li&gt;
  &lt;li&gt;Game programming&lt;/li&gt;
  &lt;li&gt;Software &amp;amp; Tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述主題不一定會出現，對特定主題有興趣的話，可以留言作為發文參考。
(如果有人在看的話 XD)&lt;/p&gt;

&lt;h1 id=&quot;目錄&quot;&gt;目錄&lt;/h1&gt;

&lt;p&gt;Day01 - 2019 iT 邦幫忙鐵人賽 目錄及前言&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><summary type="html">第一篇，照慣例(誰說的？)用來當目錄和前言，尤其是這次沒有明確主題的系列，更是需要目錄，因為連我自己都不知道會有哪些文章。(逃~)</summary></entry><entry><title type="html">Visual Studio Precompiled Headers setting issues</title><link href="https://twblog.hongjianching.com/2018/09/12/visual-studio-precompiled-headers-setting-issues/" rel="alternate" type="text/html" title="Visual Studio Precompiled Headers setting issues" /><published>2018-09-12T00:00:00+08:00</published><updated>2018-09-12T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/09/12/visual-studio-precompiled-headers-setting-issues</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/09/12/visual-studio-precompiled-headers-setting-issues/">&lt;h2 id=&quot;precompiled-headers&quot;&gt;Precompiled Headers&lt;/h2&gt;
&lt;p&gt;最近發現專案使用的 Precompiled Headers 設定錯誤，增加了 94% 的建置時間。&lt;/p&gt;

&lt;p&gt;以下是錯誤的專案設定
&lt;img src=&quot;/assets/images/2018-09-12-visual-studio-precompiled-headers-setting-issues/2018-09-12_20-24-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在專案中的 Precompiled Headers 設定選項雖然有三個，分別是&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create(/Yc)&lt;/li&gt;
  &lt;li&gt;Use(/Yu)&lt;/li&gt;
  &lt;li&gt;Not Using Precompiled Headers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但其實真正能選的只有兩種，就是 Create(/Yc) 不能選，因為這是給檔案設定的。
如果這個專案要啟用 Precompiled Headers 就選 Use(/Yu)，
不啟用就選 Not Using Precompiled Headers。&lt;/p&gt;

&lt;p&gt;因為這個專案要啟用，所以改為  Use(/Yu)
&lt;img src=&quot;/assets/images/2018-09-12-visual-studio-precompiled-headers-setting-issues/2018-09-12_20-25-12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就是這個小小的設定，原本要編譯 100 秒的專案，只需要 5.8 秒，足足降低了 94% 的建置時間。&lt;/p&gt;

&lt;h2 id=&quot;multi-processor-compilation&quot;&gt;Multi-processor Compilation&lt;/h2&gt;
&lt;p&gt;因為目前的電腦都有多核的設計，再啟用多核心編譯功能，設定 Multi-processor Compilation 為 Yes (/MP)
&lt;img src=&quot;/assets/images/2018-09-12-visual-studio-precompiled-headers-setting-issues/2018-09-12_20-32-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;啟用後建置時間只需要 3.5 秒，再節省 60% 的建置時間。&lt;/p&gt;

&lt;h2 id=&quot;結論&quot;&gt;結論&lt;/h2&gt;
&lt;p&gt;正確設定 Precompiled Headers 加上 Multi-processor Compilation，從原本的 100 秒 縮短為 3.5 秒，等於加速了 28 倍，可以大幅減少等待時間。&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="Visual-Studio" /><summary type="html">Precompiled Headers 最近發現專案使用的 Precompiled Headers 設定錯誤，增加了 94% 的建置時間。</summary></entry></feed>