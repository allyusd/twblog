<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="https://twblog.hongjianching.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://twblog.hongjianching.com/" rel="alternate" type="text/html" /><updated>2018-10-21T22:59:46+08:00</updated><id>https://twblog.hongjianching.com/</id><title type="html">Jian-Ching 記事本</title><subtitle>An notebook website.</subtitle><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><entry><title type="html">Jenkins - Pipeline as Code - Slack Notifier</title><link href="https://twblog.hongjianching.com/2018/10/21/jenkins-pipeline-as-code-slack-notifier/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - Slack Notifier" /><published>2018-10-21T00:00:00+08:00</published><updated>2018-10-21T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/21/jenkins-pipeline-as-code-slack-notifier</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/21/jenkins-pipeline-as-code-slack-notifier/">&lt;p&gt;希望在 Pipeline 異常的時候通知你？透過 Slack Notifier 完成目的&lt;/p&gt;

&lt;h1 id=&quot;jenkins-slack-integration&quot;&gt;Jenkins Slack Integration&lt;/h1&gt;

&lt;p&gt;首先要到 slack 的 apps 管理頁面，&lt;code class=&quot;highlighter-rouge&quot;&gt;https://xxx.slack.com/apps/manage&lt;/code&gt;，其中 xxx 請代入自己的組織名稱，接著在上方搜尋的地方輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;jenkins&lt;/code&gt; 會出現 &lt;code class=&quot;highlighter-rouge&quot;&gt;Jenkins CI&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_21-46-24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點選進入 Jenkins CI Apps 頁面，左方有個 &lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt; 按下去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_21-46-46.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著會問你想要發訊息到哪一個 Channel，其實隨便選都可以，之後可以在 Jenkins 修改，這邊我選了 &lt;code class=&quot;highlighter-rouge&quot;&gt;#general&lt;/code&gt; 頻道&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_21-47-30.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;按下之後會有完整的圖文教學，首先要到 Jenkins 管理頁面安裝 &lt;strong&gt;Slack Notification Plugin&lt;/strong&gt;，我使用的 Jenkins 版本跟教學的圖片不一樣，會省略 Plugin 文字，所以要搜尋的話最好只用前面的 &lt;strong&gt;Slack Notification&lt;/strong&gt; 會比較好找到。&lt;/p&gt;

&lt;p&gt;安裝完外掛之後，要到&lt;strong&gt;管理 Jenkins&lt;/strong&gt;，&lt;strong&gt;設定系統&lt;/strong&gt;的&lt;strong&gt;Global Slack Notifier Settings&lt;/strong&gt; 貼上從 Jenkins CI App 教學頁面給的設定&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;設定 Base URL 為https://xxx.slack.com/services/hooks/jenkins-ci/&lt;/li&gt;
  &lt;li&gt;設定 Integration Token 為 Mursq71aDfDJke4cvUWx9n2f&lt;/li&gt;
  &lt;li&gt;設定 Channel 為 general&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定後可以按一下 &lt;strong&gt;Test Connection&lt;/strong&gt;，成功時 Slack 會出現測試訊息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_22-46-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jenkinsfile&quot;&gt;Jenkinsfile&lt;/h1&gt;

&lt;p&gt;因為訊息的發佈應該是跨越 stage 的，所以我們在 stages 平行新增一個 post 宣告。當 pipeline 失敗的時候，使用 &lt;strong&gt;failure&lt;/strong&gt; 宣告發送失敗的訊息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;color&lt;/strong&gt; 可以定義發佈訊息旁的顏色標示，失敗時用紅色
&lt;strong&gt;message&lt;/strong&gt; 就是發佈的訊息內容，為了提醒所有人注意到東西壞掉了，可以加上 @channel，太吵的話可以拿掉，或是討論一下為什麼常常壞掉。還可以透過 Jenkins 的變數提供有用的訊息，像是 &lt;strong&gt;env.JOB_BASE_NAME&lt;/strong&gt; 可以提供專案名稱，&lt;strong&gt;env.BUILD_URL&lt;/strong&gt; 則是提供本次建置的網址&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;failure {
    slackSend color: '#FF0000',
    message: &quot;@channel ${env.JOB_BASE_NAME} failure. (${env.BUILD_URL})&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了壞掉的時候發出訊息通知外，我們也可以發送一些好消息，像是 &lt;strong&gt;fixed&lt;/strong&gt; 代表東西修好了，也就是原先建置失敗的專案，第一次建置成功的時候發出通知。這次的顏色用綠色，訊息則簡單的說明哪個專案回到建置成功的狀態&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fixed {
    slackSend color: '#00FF00',
    message: &quot;@channel ${env.JOB_BASE_NAME} back to success.&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因為完整的 Jenkinsfile 很長，這次不貼到文章上，直接給&lt;a href=&quot;https://github.com/allyusd/jenkins-pipeline/blob/slack-notifier/Jenkinsfile&quot;&gt;連結&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因為成功的建置不會發送訊息，所以我們先故意用一個壞掉的來建置&lt;/p&gt;

&lt;p&gt;同樣是 &lt;strong&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/strong&gt;，branch 是 &lt;strong&gt;slack-notifier-fail&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;建置失敗，slack 收到了失敗通知&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_22-52-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著換成正確的 branch &lt;strong&gt;slack-notifier&lt;/strong&gt; 然後再建置一次&lt;/p&gt;

&lt;p&gt;這次建置成功，因為前一個建置失敗，所以 slack 收到修復通知&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-21-jenkins-pipeline-as-code-slack-notifier/2018-10-21_22-57-32.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ref&quot;&gt;ref&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/slack/#slack-notification-plugin&quot;&gt;Slack Notification Plugin&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">希望在 Pipeline 異常的時候通知你？透過 Slack Notifier 完成目的</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - Last Changes</title><link href="https://twblog.hongjianching.com/2018/10/20/jenkins-pipeline-as-code-last-changes/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - Last Changes" /><published>2018-10-20T00:00:00+08:00</published><updated>2018-10-20T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/20/jenkins-pipeline-as-code-last-changes</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/20/jenkins-pipeline-as-code-last-changes/">&lt;p&gt;這次要讓 Jenkins 可以顯示程式碼的變更&lt;/p&gt;

&lt;p&gt;這個功能要透過 plugin 來完成，所以要先安裝 plugin，在 Jenkins 首頁選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;管理 Jenkins&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-33-28.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理 Jenkins 頁面，選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;管理外掛程式&lt;/code&gt;，這邊的外掛程式指的就是 Jenkins plugin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-36-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在管理外掛程式頁面，會有四個分頁&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;更新
代表你已安裝的 plugin 有更新的版本可以安裝&lt;/li&gt;
  &lt;li&gt;可用的
代表你未安裝的 plugin&lt;/li&gt;
  &lt;li&gt;已安裝
代表你已安裝的 plugin&lt;/li&gt;
  &lt;li&gt;進階
關於 plugin 安裝的相關設定，HTTP Proxy設定、上傳外掛程式、更新網址等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在這裡我們選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;可用的&lt;/code&gt;分頁&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-39-00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著在一大堆的 plugin 中找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;Last Changes&lt;/code&gt;，可以透過 Ctrl + F 之類的機制會比較快找到喔&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-40-16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著選擇下方的&lt;code class=&quot;highlighter-rouge&quot;&gt;下載並於重新啟動後安裝&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-45-39.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正在安裝/升級 Plugins 頁面，把下方的&lt;code class=&quot;highlighter-rouge&quot;&gt;當安裝完成且沒有工作正在執行時，重啟 Jenkins&lt;/code&gt;打勾，這樣 Jenkins 就會自動重啟喔&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_22-49-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jenkins 重啟之後，plugin 就可以使用了，接下來修改 Jenkinsfile。關鍵字是 &lt;code class=&quot;highlighter-rouge&quot;&gt;lastChanges&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;format&lt;/code&gt; 選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;side-by-side&lt;/code&gt;，會將兩個版本分別顯示在左邊跟右邊，個人習慣這種方式。因為差異不論建置成功或失敗都會想看，所以我們放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;always&lt;/code&gt; 宣告內，有別於 archiveArtifacts 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;success&lt;/code&gt; 宣告只有在建置成功才執行，在 always 內的動作無論如何都會執行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;always {
    lastChanges format:'SIDE', matching: 'LINE'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這次的程式碼同樣在 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/code&gt;，branch 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;last-changes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;執行後，在左邊選單列會出現 &lt;code class=&quot;highlighter-rouge&quot;&gt;View Last Changes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_23-06-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;View Last Changes 的結果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-20-jenkins-pipeline-as-code-last-changes/2018-10-20_23-11-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從上圖可以明顯的知道這次的程式碼修改了什麼，幫助判斷是什麼部份可以造成建置的錯誤&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">這次要讓 Jenkins 可以顯示程式碼的變更</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 測試報告</title><link href="https://twblog.hongjianching.com/2018/10/19/jenkins-pipeline-as-code-test-report/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 測試報告" /><published>2018-10-19T00:00:00+08:00</published><updated>2018-10-19T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/19/jenkins-pipeline-as-code-test-report</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/19/jenkins-pipeline-as-code-test-report/">&lt;p&gt;這篇的主題是測試報告，接續 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/17/jenkins-pipeline-as-code-artifacts/&quot;&gt;Jenkins - Pipeline as Code - 封存檔案&lt;/a&gt;及&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/18/google-test-on-ubuntu/&quot;&gt;在 Ubuntu 使用 Google Test&lt;/a&gt;兩篇文章，這篇要整合起來&lt;/p&gt;

&lt;h1 id=&quot;build&quot;&gt;Build&lt;/h1&gt;
&lt;p&gt;首先，原本的 C++ 專案，新增 Google Test 在 git branch &lt;code class=&quot;highlighter-rouge&quot;&gt;gtest&lt;/code&gt;，所以要修改原本 Jenkinsfile 指定 branch&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch: 'gtest', url: 'https://github.com/allyusd/helloworld.cpp.git'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;同時新增建置 unit test 的部份&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh 'g++ unittest.cpp -o unittest -Igtest/include -Lgtest/lib -lgtest -lpthread'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;別忘了也要封裝 unittest 檔案，才能在另一個 agent 中執行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;archiveArtifacts artifacts: 'helloworld,unittest'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;test&quot;&gt;Test&lt;/h1&gt;
&lt;p&gt;接著修改 Test 階段，將原本執行 helloworld 換成 unittest，並且加上參數  –gtest_output=”xml:report.xml” 產生測試報告&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./unittest --gtest_output=&quot;xml:report.xml&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;接著就要將測試報告上傳到 Jenkins，才能在 Web UI 出現結果&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;post {
    always {
        junit '*.xml'
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;結果&quot;&gt;結果&lt;/h1&gt;
&lt;p&gt;完整修改後的內容如下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                label 'cpp'
            }
            steps {
                echo 'Building..'
                git branch: 'gtest', url: 'https://github.com/allyusd/helloworld.cpp.git'
                sh 'g++ helloworld.cpp -o helloworld'
                sh 'g++ unittest.cpp -o unittest -Igtest/include -Lgtest/lib -lgtest -lpthread'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'helloworld,unittest'
                }
            }
        }
        stage('Test') {
            agent {
                label 'test'
            }
            steps {
                echo 'Testing..'
                sh '''#!/bin/bash
                curl -O ${BUILD_URL}artifact/unittest
                chmod +x unittest
                ./unittest --gtest_output=&quot;xml:report.xml&quot;
                '''
            }
            post {
                always {
                    junit '*.xml'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果要使用已建立好的檔案，同樣在 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/code&gt;，這次是 &lt;code class=&quot;highlighter-rouge&quot;&gt;test-report&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;執行後，在專案主頁會出現&lt;code class=&quot;highlighter-rouge&quot;&gt;測試結果趨勢&lt;/code&gt;圖&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-19-jenkins-pipeline-as-code-test-report/2018-10-19_22-17-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;並且在建置頁面會出現&lt;code class=&quot;highlighter-rouge&quot;&gt;測試結果&lt;/code&gt;，如果有失敗的測試，這邊可以查閱
&lt;img src=&quot;/assets/images/2018-10-19-jenkins-pipeline-as-code-test-report/2018-10-19_22-18-53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">這篇的主題是測試報告，接續 Jenkins - Pipeline as Code - 封存檔案及在 Ubuntu 使用 Google Test兩篇文章，這篇要整合起來</summary></entry><entry><title type="html">在 Ubuntu 使用 Google Test</title><link href="https://twblog.hongjianching.com/2018/10/18/google-test-on-ubuntu/" rel="alternate" type="text/html" title="在 Ubuntu 使用 Google Test" /><published>2018-10-18T00:00:00+08:00</published><updated>2018-10-18T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/18/google-test-on-ubuntu</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/18/google-test-on-ubuntu/">&lt;p&gt;要使用 Google Test，首先要取得程式碼&lt;/p&gt;

&lt;p&gt;原始碼可以在 &lt;a href=&quot;https://github.com/google/googletest/releases&quot;&gt;Releases · google/googletest&lt;/a&gt; 下載，在 Ubuntu 則可以透過 libgtest-dev 套件取得&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install libgtest-dev -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;套件會安裝在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/src/gtest&lt;/code&gt; 目錄下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/src/gtest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;透過 cmake 進行建置設定，產生 makefile&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake CMakeLists.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最後進行建置&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功建置後會產生 libgtest.a 及 libgtest_main.a 兩個檔案&lt;/p&gt;

&lt;p&gt;接著建立一個檔案測試一下&lt;/p&gt;

&lt;p&gt;unittest.cpp&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;gtest/gtest.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define HELLOWORLD &quot;Hello World&quot;
&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoogleTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;ASSERT_EQ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLOWORLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitGoogleTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RUN_ALL_TESTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一行引用 gtest 的 header，接著定義 HELLOWORLD 代表實際結果&lt;/p&gt;

&lt;p&gt;Test 代表一個測試案例，HelloWorld 代表此測試案例的名稱，GoogleTest 則為多個測試案例的群組名稱，常見用法是以測試對象的 class 名稱命名。測試案例的內容可以用 ASSERT_EQ 來判斷期望值與實際值是否相等&lt;/p&gt;

&lt;p&gt;最後一段是初始化 Google Test 及執行所有的測試案例。&lt;/p&gt;

&lt;p&gt;寫好測試檔案，就可以進行測試程式的建置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ unittest.cpp -o unittest -Igtest/include -Lgtest/lib -lgtest -lpthread
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;建置成功後，執行測試程式&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./unittest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;測試結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-18-google-test-on-ubuntu/2018-10-18_22-46-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Google-Test" /><category term="Ubuntu" /><summary type="html">要使用 Google Test，首先要取得程式碼</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 封存檔案</title><link href="https://twblog.hongjianching.com/2018/10/17/jenkins-pipeline-as-code-artifacts/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 封存檔案" /><published>2018-10-17T00:00:00+08:00</published><updated>2018-10-17T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/17/jenkins-pipeline-as-code-artifacts</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/17/jenkins-pipeline-as-code-artifacts/">&lt;p&gt;接續前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/16/jenkins-pipeline-as-code-cpp-project/&quot;&gt;Jenkins - Pipeline as Code - C++ 專案&lt;/a&gt;，這篇的主題是封存檔案&lt;/p&gt;

&lt;p&gt;封存檔案功能可以把編譯完成的檔案存起來，這樣之後要用就可以直接使用，不需要再次編譯&lt;/p&gt;

&lt;p&gt;在講封存檔案之前，先來講一下 Pipeline 在不同 Agent 之間進行作業的情況吧&lt;/p&gt;

&lt;p&gt;這次&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/&quot;&gt;使用的環境&lt;/a&gt;加上一點點的修改，在原本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;agent&lt;/code&gt; 的&lt;code class=&quot;highlighter-rouge&quot;&gt;設定&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;標籤&lt;/code&gt; 加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;，用來跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;agent-cpp&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt; 標籤作出明確區隔。&lt;/p&gt;

&lt;p&gt;首先要在 Build、Test 階段分別指定不同的 Agent，在 Build 使用有 C++ 編釋環境的 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt; 標籤，在 Test 則使用沒有 C++ 編釋環境的 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 標籤，這樣的設定可以確保編釋完成的檔案可以順利的發佈，避免只能在開發環境執行的情況。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stage('Build') {
    agent {
        label 'test'
    }
    steps {
        ... (略)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stage('Test') {
    agent {
        label 'cpp'
    }
    steps {
        ... (略)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;除了上面兩個設定之外，別忘了在最一開始&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/14/jenkins-pipeline-as-code-introduction/&quot;&gt;介紹&lt;/a&gt;的時候說過，當各個 state 使用各自的 agent 宣告時，最頂級的 agent 要宣告為 none&lt;/p&gt;

&lt;p&gt;完整的 Jenkinsfile 為下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                label 'cpp'
            }
            steps {
                echo 'Building..'
                git 'https://github.com/allyusd/helloworld.cpp.git'
                sh 'g++ helloworld.cpp -o helloworld'
            }
        }
        stage('Test') {
            agent {
                label 'test'
            }
            steps {
                echo 'Testing..'
                sh './helloworld'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要使用預建立的檔案，同樣在 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/code&gt;，這次是 &lt;code class=&quot;highlighter-rouge&quot;&gt;different-agent&lt;/code&gt; branch。&lt;/p&gt;

&lt;p&gt;修改後啟動建置，會發現失敗了。首先檢查我們的設定是否正確生效
首先 Build 是執行在 agent-cpp，接著 Test 是執行在 agent&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-17-jenkins-pipeline-as-code-artifacts/2018-10-17_22-04-06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-17-jenkins-pipeline-as-code-artifacts/2018-10-17_22-05-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從 Logs 來看設定是正確的，那錯誤是什麼呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-17-jenkins-pipeline-as-code-artifacts/2018-10-17_22-07-15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;發現錯誤訊息是找不到執行檔 helloworld，為什麼之前可以正常執行，現在卻找不到？跟我們剛剛做的變更有關嗎？&lt;/p&gt;

&lt;p&gt;原因是原本我們都在同一個 agnet 上執行，所以編釋後可以直接執行。但是現在我們在 agent-cpp 上編釋，當想要在 agent 執行的時候，是沒有檔案可以執行的。該怎麼辦呢？&lt;/p&gt;

&lt;p&gt;好的，回到主題，我們可以利用封存檔案的功能來取得 agent-cpp 編譯完成的 helloworld 檔案&lt;/p&gt;

&lt;p&gt;首先在 Build 階段將檔案封存，跟建置無關的動作，要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; 區段內宣告，只有成功才進行封存，封存的指令是 &lt;code class=&quot;highlighter-rouge&quot;&gt;archiveArtifacts&lt;/code&gt;，後面接著 &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts&lt;/code&gt; 參數加上檔案名稱&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;post {
    success {
        archiveArtifacts artifacts: 'helloworld'
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;同時在 Test 階段要取得已封存的檔案，這裡可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;BUILD_URL&lt;/code&gt; 環境變數來取得要下載的網址。然後將下載後的檔案加上執行的權限，最後才是執行檔案&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;steps {
    echo 'Testing..'
    sh '''#!/bin/bash
    curl -O ${BUILD_URL}artifact/helloworld
    chmod +x helloworld
    ./helloworld
    '''
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要使用預建立的檔案，branch 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;artifacts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;重新建置之後，這次成功執行了，從 Logs 中可以看到有下載檔案的紀錄及執行的結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-17-jenkins-pipeline-as-code-artifacts/2018-10-17_22-30-20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;對了，當我們成功封存檔案，在 Stage View 也可以找到下載的連結喔！雖然不怎麼明顯呢&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-17-jenkins-pipeline-as-code-artifacts/2018-10-17_22-31-31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">接續前一篇 Jenkins - Pipeline as Code - C++ 專案，這篇的主題是封存檔案</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - C++ 專案</title><link href="https://twblog.hongjianching.com/2018/10/16/jenkins-pipeline-as-code-cpp-project/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - C++ 專案" /><published>2018-10-16T00:00:00+08:00</published><updated>2018-10-16T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/16/jenkins-pipeline-as-code-cpp-project</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/16/jenkins-pipeline-as-code-cpp-project/">&lt;p&gt;接續前一篇 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/15/jenkins-pipeline-as-code-first-project/&quot;&gt;Jenkins - Pipeline as Code - 第一個專案&lt;/a&gt;，這次來建立 C++ 專案&lt;/p&gt;

&lt;p&gt;因為要編譯 C++，使用 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/&quot;&gt;建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 2&lt;/a&gt; 這篇所建立的環境&lt;/p&gt;

&lt;p&gt;首先要修改的是 agent 的部份，這次要指定有 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt; 標籤的 agent 才能執行這個 pipeline，所以修改原本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;agent any&lt;/code&gt; 為&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agent {
    label 'cpp'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著是透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; 指令取得原始碼，這邊同樣以 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/helloworld.cpp.git&lt;/code&gt; 為例，然後透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; 執行編譯，修改後的 Build 階段為&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stage('Build') {
    steps {
        echo 'Building..'
        git 'https://github.com/allyusd/helloworld.cpp.git'
        sh 'g++ helloworld.cpp -o helloworld'
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因為這個簡單的範例沒有 unit test，所以透過執行結果代替一下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stage('Test') {
    steps {
        echo 'Testing..'
        sh './helloworld'
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要使用建立好的檔案，直接把 branch 改為 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt;，按下建置後，會看到所有階段都成功完成&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-16-jenkins-pipeline-as-code-cpp-project/2018-10-16_22-00-34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著把滑鼠移到 Build 的區域，也就是顯示 Build 花費時間 5s 的地方，會出現 Success，下方有個 &lt;code class=&quot;highlighter-rouge&quot;&gt;Logs&lt;/code&gt; 可以點選&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-16-jenkins-pipeline-as-code-cpp-project/2018-10-16_22-04-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;點擊後會發現紀錄依據 Jenkinsfile 所描述的三個步驟分別折疊起來，可以依自己有興趣的部份去檢視&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-16-jenkins-pipeline-as-code-cpp-project/2018-10-16_22-06-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;像是 Test 階段我們有執行程式，從這裡就可以看到有輸出 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; 的結果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-16-jenkins-pipeline-as-code-cpp-project/2018-10-16_22-08-08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">接續前一篇 Jenkins - Pipeline as Code - 第一個專案，這次來建立 C++ 專案</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 第一個專案</title><link href="https://twblog.hongjianching.com/2018/10/15/jenkins-pipeline-as-code-first-project/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 第一個專案" /><published>2018-10-15T00:00:00+08:00</published><updated>2018-10-15T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/15/jenkins-pipeline-as-code-first-project</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/15/jenkins-pipeline-as-code-first-project/">&lt;p&gt;&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/14/jenkins-pipeline-as-code-introduction/&quot;&gt;Jenkins - Pipeline as Code - 簡介&lt;/a&gt;說明完簡單範例，接著來實際建立專案執行看看&lt;/p&gt;

&lt;p&gt;以&lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt;為執行環境&lt;/p&gt;

&lt;p&gt;在左邊功能列點擊&lt;code class=&quot;highlighter-rouge&quot;&gt;新增作業&lt;/code&gt;，然後名稱輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;jenkins-pipeline&lt;/code&gt;，下方選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt; 後按下 &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-15-jenkins-pipeline-as-code-first-project/2018-10-15_21-09-42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipeline&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Definition&lt;/code&gt; 選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pipeline script from SCM&lt;/code&gt;，接荖輸入 Jenkinsfile 所在的 Git 網址，單純想測試的話可以用已經建立好的這個路徑 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/jenkins-pipeline.git&lt;/code&gt;，下方的 branch 選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt;，最後按下儲存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-15-jenkins-pipeline-as-code-first-project/2018-10-15_21-15-41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在左方功能列選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;馬上建置&lt;/code&gt;，等他執行一會兒，會看到專案主頁會出現 &lt;code class=&quot;highlighter-rouge&quot;&gt;Stage View&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-15-jenkins-pipeline-as-code-first-project/2018-10-15_21-20-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從畫面可以看出來我們在 Jenkinsfile 定義的 Pipeline 流程，除了一開始要 Checkout SCM 才能讀取 Jenkinsfile 這一步驟外，就是 Build、Test、Deploy 三個階段。&lt;/p&gt;

&lt;p&gt;接下來我們故意讓 Pipeline 失敗看看結果是什麼。在 Test 這一個階段故意以非 0 結束 shell，讓 Jenkins 判定此階段執行失敗&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stage('Test') {
    steps {
        echo 'Testing..'
        sh 'exit 1'
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果要使用建立好的檔案，請把 branch 改為 &lt;code class=&quot;highlighter-rouge&quot;&gt;sample-fail&lt;/code&gt;，按下建置後，同樣等結果執行完成。&lt;/p&gt;

&lt;p&gt;從執行的結果可以看到，Test、Deploy 是 failed 的狀態，基於 Pipeline 的概念，實際上 Deploy 是因為前一個 Test 階段失敗，所以跳過沒有執行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-15-jenkins-pipeline-as-code-first-project/2018-10-15_21-38-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在真實場景中，Test 階段失敗是 Unit Test fail 的關係，要去檢查程式碼的邏輯是否正確，或是 Unit Test 已經過時該修正了。如果 fail 在 Build 階段，正常是程式碼寫錯，但是如果有使用 IDE 的話，大多數則是有程式碼忘記上傳造成建置失敗。&lt;/p&gt;

&lt;p&gt;總結來說，Pipeline 視覺化的 Stage View 可以提供開發者第一時間要往哪個方向去解決問題做出提示。&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">Jenkins - Pipeline as Code - 簡介說明完簡單範例，接著來實際建立專案執行看看</summary></entry><entry><title type="html">Jenkins - Pipeline as Code - 簡介</title><link href="https://twblog.hongjianching.com/2018/10/14/jenkins-pipeline-as-code-introduction/" rel="alternate" type="text/html" title="Jenkins - Pipeline as Code - 簡介" /><published>2018-10-14T00:00:00+08:00</published><updated>2018-10-14T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/14/jenkins-pipeline-as-code-introduction</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/14/jenkins-pipeline-as-code-introduction/">&lt;p&gt;Jenkins 是個歷史悠久的 CI / CD 工具，從 Jenkins 2.0 開始正式推展 Pipeline，有別於以往使用 Web UI 操作的特性，導向 Pipeline as Code 的實踐。透過在原始碼專案新增一個 Jenkinsfile 的檔案，將 Pipeline 的流程都寫在檔案內。&lt;/p&gt;

&lt;p&gt;Pipeline 就是流水線的意思，一個完整的流程可以包含 Build (建置)、 Test (測試)、Deploy (部署) 三個 state (階段)，每個公司或產品的 CD 流程所包含的 state 可能不同，可以依需要各別調整。&lt;/p&gt;

&lt;p&gt;簡單 Pipeline 範例 &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/jenkinsfile/&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;pipeline&quot;&gt;pipeline&lt;/h1&gt;
&lt;p&gt;Jenkinsfile 的開頭宣告&lt;/p&gt;

&lt;h1 id=&quot;agent&quot;&gt;agent&lt;/h1&gt;
&lt;p&gt;指定什麼條件的 agent 可以執行這個專案，any 表示不指定，任意 agent 都可以執行，這個設定相當於 UI 上的&lt;code class=&quot;highlighter-rouge&quot;&gt;限制專案執行節點&lt;/code&gt;，可以用 label 指定 agent 標籤，假如指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 的話&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;agent { 
    label 'test'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;另一種情況，如果在不同 state 要分別指定不同 agent 的時候，最上層的 agent 會指定為 none，然後在各自 state 要指定 agent&lt;/p&gt;

&lt;h1 id=&quot;stagesstage&quot;&gt;stages、stage&lt;/h1&gt;
&lt;p&gt;代表流水線的各個階段，範例中為 Build, Test, Deploy，這個設定單純為文字，可以依自己的需要命名。主要用在網頁的視覺化效果，像是流水線失敗是在哪一個階段看一眼就可以掌握。或是流水線需要在不同 agent 上執行的時候，就可以透過 stages 分別設定。&lt;/p&gt;

&lt;h1 id=&quot;steps&quot;&gt;steps&lt;/h1&gt;
&lt;p&gt;主要執行步驟，常見的是使用 echo 輸出訊息，或是 sh 執行命令。&lt;/p&gt;

&lt;h1 id=&quot;ref&quot;&gt;ref&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/jenkinsfile/&quot;&gt;Using a Jenkinsfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/syntax/#stages&quot;&gt;Pipeline Syntax&lt;/a&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Jenkins" /><summary type="html">Jenkins 是個歷史悠久的 CI / CD 工具，從 Jenkins 2.0 開始正式推展 Pipeline，有別於以往使用 Web UI 操作的特性，導向 Pipeline as Code 的實踐。透過在原始碼專案新增一個 Jenkinsfile 的檔案，將 Pipeline 的流程都寫在檔案內。</summary></entry><entry><title type="html">建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 2</title><link href="https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/" rel="alternate" type="text/html" title="建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 2" /><published>2018-10-13T00:00:00+08:00</published><updated>2018-10-13T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/13/create-cpp-compiler-with-jenkins-agent-docker-image-part-2/">&lt;p&gt;前一篇發現預設的 Jenkins Agent 沒有 C++ 編譯環境，所以我們要來解決這個問題。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt; 中提到使用的 agent docker image 是 jenkins/jnlp-slave，所以我們先參考一下原本的 Dockerfile 是怎麼寫的 &lt;a href=&quot;https://github.com/jenkinsci/docker-jnlp-slave/blob/3.26-1/Dockerfile&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/slave:3.26-1
MAINTAINER Oleg Nenashev &amp;lt;o.v.nenashev@gmail.com&amp;gt;
LABEL Description=&quot;This is a base image, which allows connecting Jenkins agents via JNLP protocols&quot; Vendor=&quot;Jenkins project&quot; Version=&quot;3.23&quot;

COPY jenkins-slave /usr/local/bin/jenkins-slave

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;從內容中可以知道，先複製了 slave 檔案然後啟動 slave，因為複製做一次就好，所以我們只需要啟動 slave。&lt;/p&gt;

&lt;p&gt;利用 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/08/create-dockerhub-automated-build/&quot;&gt;使用 GitHub 在 DockerHub 自動建置 Docker Image&lt;/a&gt; 的方法，建立一個 &lt;a href=&quot;https://github.com/allyusd/docker-jenkins-jnlp-slave-cpp&quot;&gt;docker-jenkins-jnlp-slave-cpp&lt;/a&gt; github 專案並且建立一個 Dockerfile 檔案，內容就是以 jenkins/jnlp-slave 為基底，加上安裝 C++ 編譯環境，最後記得啟動 slave&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/jnlp-slave:3.26-1

RUN apt update &amp;amp;&amp;amp; apt install build-essential -y

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著在 dockerhub 建立 &lt;a href=&quot;https://hub.docker.com/r/allyusd/jenkins-jnlp-slave-cpp/&quot;&gt;jenkins-jnlp-slave-cpp&lt;/a&gt; 自動建置專案，並且手動觸發一次，等著拿建置好的 image 來用，&lt;/p&gt;

&lt;p&gt;但是建置結果卻失敗了，來檢查一下 &lt;a href=&quot;https://hub.docker.com/r/allyusd/jenkins-jnlp-slave-cpp/builds/baavigxpyfscewc3e63nbvh/&quot;&gt;Log&lt;/a&gt;，錯誤訊息居然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;List directory /var/lib/apt/lists/partial is missing. - Acquire (13: Permission denied)&lt;/code&gt;
權限不足？這沒道理啊，docker 預設是 root，怎麼會有權限問題呢？等等，剛剛是不是提到了&lt;code class=&quot;highlighter-rouge&quot;&gt;預設&lt;/code&gt;兩個字。既然如此，那有可能是被改掉了，但是剛剛參考的 Dockerfile 很乾淨，難道是再上一層繼承的 image？&lt;/p&gt;

&lt;p&gt;從 Dockerfile 可以看到 jenkins/jnlp-slave 是繼承 jenkins/slave來的，那來看一下 Dockerfile &lt;a href=&quot;https://github.com/jenkinsci/docker-slave/blob/3.26-1/Dockerfile&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM openjdk:8-jdk
MAINTAINER Oleg Nenashev &amp;lt;o.v.nenashev@gmail.com&amp;gt;

ARG user=jenkins
ARG group=jenkins
ARG uid=10000
ARG gid=10000

ENV HOME /home/${user}
RUN groupadd -g ${gid} ${group}
RUN useradd -c &quot;Jenkins user&quot; -d $HOME -u ${uid} -g ${gid} -m ${user}
LABEL Description=&quot;This is a base image, which provides the Jenkins agent executable (slave.jar)&quot; Vendor=&quot;Jenkins project&quot; Version=&quot;3.23&quot;

ARG VERSION=3.26
ARG AGENT_WORKDIR=/home/${user}/agent

RUN curl --create-dirs -sSLo /usr/share/jenkins/slave.jar https://repo.jenkins-ci.org/public/org/jenkins-ci/main/remoting/${VERSION}/remoting-${VERSION}.jar \
  &amp;amp;&amp;amp; chmod 755 /usr/share/jenkins \
  &amp;amp;&amp;amp; chmod 644 /usr/share/jenkins/slave.jar

USER ${user}
ENV AGENT_WORKDIR=${AGENT_WORKDIR}
RUN mkdir /home/${user}/.jenkins &amp;amp;&amp;amp; mkdir -p ${AGENT_WORKDIR}

VOLUME /home/${user}/.jenkins
VOLUME ${AGENT_WORKDIR}
WORKDIR /home/${user}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;抓到了！其中有一行是 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER ${user}&lt;/code&gt;，這個指令改變了目前的使用者為 jenkins，造成權限不足以安裝套件。既然如此，那我們就把使用者改回來試試看。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM jenkins/jnlp-slave:3.26-1

USER root
RUN apt update &amp;amp;&amp;amp; apt install build-essential -y
USER jenkins

ENTRYPOINT [&quot;jenkins-slave&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;這 Github 更新 Dockerfile 之後，Dockerhub 自動開始了建置映像檔的動作，我們可以上個廁所、泡泡茶再回來看看建置結果。&lt;/p&gt;

&lt;p&gt;很好，這次成功了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_21-07-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來就是啟動一個新的 agent，如果忘記的話可以參考 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這次不同的是，標籤設定為 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt;，使用方式設為&lt;code class=&quot;highlighter-rouge&quot;&gt;只保留給限定節點的作業&lt;/code&gt;，因為有些專案不需要 C++ 環境，所以我們為了區隔，讓這個 agent 只跑需要 C++ 的專案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_21-10-33.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接著啟動 C++ Agent&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --name jenkins_agent_cpp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -d --restart always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    allyusd/jenkins-jnlp-slave-cpp &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -url http://192.168.43.140:8080 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    951ac478b69131e43fb2cfb6d201ecf789ba388a759ea946d7ab62aac55227a7 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    agent-cpp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;接著修改上一篇建立的 &lt;code class=&quot;highlighter-rouge&quot;&gt;test_cpp&lt;/code&gt; 專案設定，選取&lt;code class=&quot;highlighter-rouge&quot;&gt;限制專案執行節點&lt;/code&gt;，在&lt;code class=&quot;highlighter-rouge&quot;&gt;標籤表示式&lt;/code&gt;輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;cpp&lt;/code&gt;，按下儲存之後點擊&lt;code class=&quot;highlighter-rouge&quot;&gt;馬上建置&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_22-28-48.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這一次順利的建置成功啦！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-13-create-cpp-compiler-with-jenkins-agent-docker-image-part-2/2018-10-13_22-31-40.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Cpp" /><category term="Docker" /><category term="Jenkins" /><summary type="html">前一篇發現預設的 Jenkins Agent 沒有 C++ 編譯環境，所以我們要來解決這個問題。</summary></entry><entry><title type="html">建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 1</title><link href="https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1/" rel="alternate" type="text/html" title="建立擁有 C++ 編譯環境及 Jenkins Agent 的 Docker Image - Part 1" /><published>2018-10-12T00:00:00+08:00</published><updated>2018-10-12T00:00:00+08:00</updated><id>https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1</id><content type="html" xml:base="https://twblog.hongjianching.com/2018/10/12/create-cpp-compiler-with-jenkins-agent-docker-image-part-1/">&lt;p&gt;介紹如何建立一個有 C++ 編譯環境及 Jenkins Agent 的 Docker Image。&lt;/p&gt;

&lt;p&gt;在 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/10/install-jenkins-agent-with-docker/&quot;&gt;使用 Docker 安裝 Jenkins Agent&lt;/a&gt; 我們已經建立了一個有 Agent 的 Jenkins CI 系統，先建立一個小小的專案，單純確認 Jenkins Agent 是否正常運作。&lt;/p&gt;

&lt;p&gt;選擇左方選單的&lt;code class=&quot;highlighter-rouge&quot;&gt;新增作業&lt;/code&gt;，然後名稱輸入 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 並且選擇建置 &lt;code class=&quot;highlighter-rouge&quot;&gt;Free-Style 軟體專案&lt;/code&gt; 之後按下 OK&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_22-57-50.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-11-45.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之後會自動進入 test 專案的設定，拉到最下方的&lt;code class=&quot;highlighter-rouge&quot;&gt;建置&lt;/code&gt;，選擇&lt;code class=&quot;highlighter-rouge&quot;&gt;新增建置步驟&lt;/code&gt;後按下&lt;code class=&quot;highlighter-rouge&quot;&gt;執行 Shell&lt;/code&gt;，在指令欄位輸入&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下儲存後，自動切換到專案主頁，點擊左方&lt;code class=&quot;highlighter-rouge&quot;&gt;馬上建置&lt;/code&gt;一下，然後點擊左下角&lt;code class=&quot;highlighter-rouge&quot;&gt;建置歷程&lt;/code&gt;出現的&lt;code class=&quot;highlighter-rouge&quot;&gt;#1&lt;/code&gt;，再選擇左方的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Console Output&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-19-09.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-20-07.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在右邊就會出現在 Agent 上執行的結果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-21-26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到這個結果，代表我們的 Jenkins 系統正確的運作喔。&lt;/p&gt;

&lt;p&gt;接著 &lt;a href=&quot;https://twblog.hongjianching.com/2018/10/11/install-cpp-compiler-on-ubuntu/&quot;&gt;在 Ubuntu 安裝 C++ 編譯環境&lt;/a&gt; 這篇也已經知道如何編譯 C++ 程式，讓我們試著在 Jenkins 上完成這個件事吧。&lt;/p&gt;

&lt;p&gt;照著上面的流程，再新增一個專案，命名為 test_cpp，這次在&lt;code class=&quot;highlighter-rouge&quot;&gt;原始碼管理&lt;/code&gt;選擇 &lt;code class=&quot;highlighter-rouge&quot;&gt;Git&lt;/code&gt; 並且輸入 git 網址 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/allyusd/helloworld.cpp.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-25-37.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然後在&lt;code class=&quot;highlighter-rouge&quot;&gt;執行 Shell&lt;/code&gt;輸入編譯跟執行的動作，&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;g++ helloworld.cpp -o helloworld
./helloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;按下儲存後，點選馬上建置，但是，我們得到一個紅燈，代表建置失敗&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-29-19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讓我們看一下錯誤訊息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018-10-12-create-cpp-compiler-with-jenkins-agent-docker-image-part-1/2018-10-12_23-31-05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;錯誤訊息 &lt;code class=&quot;highlighter-rouge&quot;&gt;g++: not found&lt;/code&gt; 代表我們的 Agent 沒有 C++ 編譯環境，在下一篇我們來解決這個問題&lt;/p&gt;</content><author><name>洪健清</name><email>allyusd yahoo com tw</email><uri>https://www.HongJianChing.com/</uri></author><category term="2019-iT-邦幫忙鐵人賽" /><category term="Cpp" /><category term="Docker" /><category term="Jenkins" /><summary type="html">介紹如何建立一個有 C++ 編譯環境及 Jenkins Agent 的 Docker Image。</summary></entry></feed>